
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model brandings
 * 
 */
export type brandings = $Result.DefaultSelection<Prisma.$brandingsPayload>
/**
 * Model channels
 * 
 */
export type channels = $Result.DefaultSelection<Prisma.$channelsPayload>
/**
 * Model comments
 * 
 */
export type comments = $Result.DefaultSelection<Prisma.$commentsPayload>
/**
 * Model playlist_videos
 * 
 */
export type playlist_videos = $Result.DefaultSelection<Prisma.$playlist_videosPayload>
/**
 * Model playlists
 * 
 */
export type playlists = $Result.DefaultSelection<Prisma.$playlistsPayload>
/**
 * Model tags
 * 
 */
export type tags = $Result.DefaultSelection<Prisma.$tagsPayload>
/**
 * Model thumbnails
 * 
 */
export type thumbnails = $Result.DefaultSelection<Prisma.$thumbnailsPayload>
/**
 * Model videos
 * 
 */
export type videos = $Result.DefaultSelection<Prisma.$videosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Brandings
 * const brandings = await prisma.brandings.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Brandings
   * const brandings = await prisma.brandings.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.brandings`: Exposes CRUD operations for the **brandings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brandings
    * const brandings = await prisma.brandings.findMany()
    * ```
    */
  get brandings(): Prisma.brandingsDelegate<ExtArgs>;

  /**
   * `prisma.channels`: Exposes CRUD operations for the **channels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channels.findMany()
    * ```
    */
  get channels(): Prisma.channelsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate<ExtArgs>;

  /**
   * `prisma.playlist_videos`: Exposes CRUD operations for the **playlist_videos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlist_videos
    * const playlist_videos = await prisma.playlist_videos.findMany()
    * ```
    */
  get playlist_videos(): Prisma.playlist_videosDelegate<ExtArgs>;

  /**
   * `prisma.playlists`: Exposes CRUD operations for the **playlists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlists.findMany()
    * ```
    */
  get playlists(): Prisma.playlistsDelegate<ExtArgs>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.tagsDelegate<ExtArgs>;

  /**
   * `prisma.thumbnails`: Exposes CRUD operations for the **thumbnails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thumbnails
    * const thumbnails = await prisma.thumbnails.findMany()
    * ```
    */
  get thumbnails(): Prisma.thumbnailsDelegate<ExtArgs>;

  /**
   * `prisma.videos`: Exposes CRUD operations for the **videos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.videos.findMany()
    * ```
    */
  get videos(): Prisma.videosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    brandings: 'brandings',
    channels: 'channels',
    comments: 'comments',
    playlist_videos: 'playlist_videos',
    playlists: 'playlists',
    tags: 'tags',
    thumbnails: 'thumbnails',
    videos: 'videos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'brandings' | 'channels' | 'comments' | 'playlist_videos' | 'playlists' | 'tags' | 'thumbnails' | 'videos'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      brandings: {
        payload: Prisma.$brandingsPayload<ExtArgs>
        fields: Prisma.brandingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.brandingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.brandingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          findFirst: {
            args: Prisma.brandingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.brandingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          findMany: {
            args: Prisma.brandingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>[]
          }
          create: {
            args: Prisma.brandingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          createMany: {
            args: Prisma.brandingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.brandingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          update: {
            args: Prisma.brandingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          deleteMany: {
            args: Prisma.brandingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.brandingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.brandingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$brandingsPayload>
          }
          aggregate: {
            args: Prisma.BrandingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBrandings>
          }
          groupBy: {
            args: Prisma.brandingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BrandingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.brandingsCountArgs<ExtArgs>,
            result: $Utils.Optional<BrandingsCountAggregateOutputType> | number
          }
        }
      }
      channels: {
        payload: Prisma.$channelsPayload<ExtArgs>
        fields: Prisma.channelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.channelsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.channelsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          findFirst: {
            args: Prisma.channelsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.channelsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          findMany: {
            args: Prisma.channelsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>[]
          }
          create: {
            args: Prisma.channelsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          createMany: {
            args: Prisma.channelsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.channelsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          update: {
            args: Prisma.channelsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          deleteMany: {
            args: Prisma.channelsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.channelsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.channelsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$channelsPayload>
          }
          aggregate: {
            args: Prisma.ChannelsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannels>
          }
          groupBy: {
            args: Prisma.channelsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.channelsCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelsCountAggregateOutputType> | number
          }
        }
      }
      comments: {
        payload: Prisma.$commentsPayload<ExtArgs>
        fields: Prisma.commentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commentsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commentsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          findFirst: {
            args: Prisma.commentsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commentsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          findMany: {
            args: Prisma.commentsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>[]
          }
          create: {
            args: Prisma.commentsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          createMany: {
            args: Prisma.commentsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commentsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          update: {
            args: Prisma.commentsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          deleteMany: {
            args: Prisma.commentsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commentsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commentsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.commentsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.commentsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
      playlist_videos: {
        payload: Prisma.$playlist_videosPayload<ExtArgs>
        fields: Prisma.playlist_videosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.playlist_videosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.playlist_videosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          findFirst: {
            args: Prisma.playlist_videosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.playlist_videosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          findMany: {
            args: Prisma.playlist_videosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>[]
          }
          create: {
            args: Prisma.playlist_videosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          createMany: {
            args: Prisma.playlist_videosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.playlist_videosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          update: {
            args: Prisma.playlist_videosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          deleteMany: {
            args: Prisma.playlist_videosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.playlist_videosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.playlist_videosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlist_videosPayload>
          }
          aggregate: {
            args: Prisma.Playlist_videosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylist_videos>
          }
          groupBy: {
            args: Prisma.playlist_videosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Playlist_videosGroupByOutputType>[]
          }
          count: {
            args: Prisma.playlist_videosCountArgs<ExtArgs>,
            result: $Utils.Optional<Playlist_videosCountAggregateOutputType> | number
          }
        }
      }
      playlists: {
        payload: Prisma.$playlistsPayload<ExtArgs>
        fields: Prisma.playlistsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.playlistsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.playlistsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          findFirst: {
            args: Prisma.playlistsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.playlistsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          findMany: {
            args: Prisma.playlistsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>[]
          }
          create: {
            args: Prisma.playlistsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          createMany: {
            args: Prisma.playlistsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.playlistsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          update: {
            args: Prisma.playlistsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          deleteMany: {
            args: Prisma.playlistsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.playlistsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.playlistsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$playlistsPayload>
          }
          aggregate: {
            args: Prisma.PlaylistsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylists>
          }
          groupBy: {
            args: Prisma.playlistsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistsGroupByOutputType>[]
          }
          count: {
            args: Prisma.playlistsCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistsCountAggregateOutputType> | number
          }
        }
      }
      tags: {
        payload: Prisma.$tagsPayload<ExtArgs>
        fields: Prisma.tagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tagsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tagsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          findFirst: {
            args: Prisma.tagsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tagsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          findMany: {
            args: Prisma.tagsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>[]
          }
          create: {
            args: Prisma.tagsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          createMany: {
            args: Prisma.tagsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tagsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          update: {
            args: Prisma.tagsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          deleteMany: {
            args: Prisma.tagsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tagsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tagsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          aggregate: {
            args: Prisma.TagsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTags>
          }
          groupBy: {
            args: Prisma.tagsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.tagsCountArgs<ExtArgs>,
            result: $Utils.Optional<TagsCountAggregateOutputType> | number
          }
        }
      }
      thumbnails: {
        payload: Prisma.$thumbnailsPayload<ExtArgs>
        fields: Prisma.thumbnailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.thumbnailsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.thumbnailsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          findFirst: {
            args: Prisma.thumbnailsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.thumbnailsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          findMany: {
            args: Prisma.thumbnailsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>[]
          }
          create: {
            args: Prisma.thumbnailsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          createMany: {
            args: Prisma.thumbnailsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.thumbnailsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          update: {
            args: Prisma.thumbnailsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          deleteMany: {
            args: Prisma.thumbnailsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.thumbnailsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.thumbnailsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$thumbnailsPayload>
          }
          aggregate: {
            args: Prisma.ThumbnailsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThumbnails>
          }
          groupBy: {
            args: Prisma.thumbnailsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThumbnailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.thumbnailsCountArgs<ExtArgs>,
            result: $Utils.Optional<ThumbnailsCountAggregateOutputType> | number
          }
        }
      }
      videos: {
        payload: Prisma.$videosPayload<ExtArgs>
        fields: Prisma.videosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.videosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.videosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          findFirst: {
            args: Prisma.videosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.videosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          findMany: {
            args: Prisma.videosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>[]
          }
          create: {
            args: Prisma.videosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          createMany: {
            args: Prisma.videosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.videosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          update: {
            args: Prisma.videosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          deleteMany: {
            args: Prisma.videosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.videosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.videosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$videosPayload>
          }
          aggregate: {
            args: Prisma.VideosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideos>
          }
          groupBy: {
            args: Prisma.videosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideosGroupByOutputType>[]
          }
          count: {
            args: Prisma.videosCountArgs<ExtArgs>,
            result: $Utils.Optional<VideosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ChannelsCountOutputType
   */

  export type ChannelsCountOutputType = {
    playlists: number
    videos: number
  }

  export type ChannelsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlists?: boolean | ChannelsCountOutputTypeCountPlaylistsArgs
    videos?: boolean | ChannelsCountOutputTypeCountVideosArgs
  }

  // Custom InputTypes

  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelsCountOutputType
     */
    select?: ChannelsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeCountPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: playlistsWhereInput
  }


  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videosWhereInput
  }



  /**
   * Count Type PlaylistsCountOutputType
   */

  export type PlaylistsCountOutputType = {
    playlist_videos: number
  }

  export type PlaylistsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist_videos?: boolean | PlaylistsCountOutputTypeCountPlaylist_videosArgs
  }

  // Custom InputTypes

  /**
   * PlaylistsCountOutputType without action
   */
  export type PlaylistsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistsCountOutputType
     */
    select?: PlaylistsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlaylistsCountOutputType without action
   */
  export type PlaylistsCountOutputTypeCountPlaylist_videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: playlist_videosWhereInput
  }



  /**
   * Count Type VideosCountOutputType
   */

  export type VideosCountOutputType = {
    playlist_videos: number
    tags: number
    thumbnails: number
  }

  export type VideosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist_videos?: boolean | VideosCountOutputTypeCountPlaylist_videosArgs
    tags?: boolean | VideosCountOutputTypeCountTagsArgs
    thumbnails?: boolean | VideosCountOutputTypeCountThumbnailsArgs
  }

  // Custom InputTypes

  /**
   * VideosCountOutputType without action
   */
  export type VideosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideosCountOutputType
     */
    select?: VideosCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VideosCountOutputType without action
   */
  export type VideosCountOutputTypeCountPlaylist_videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: playlist_videosWhereInput
  }


  /**
   * VideosCountOutputType without action
   */
  export type VideosCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tagsWhereInput
  }


  /**
   * VideosCountOutputType without action
   */
  export type VideosCountOutputTypeCountThumbnailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thumbnailsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model brandings
   */

  export type AggregateBrandings = {
    _count: BrandingsCountAggregateOutputType | null
    _min: BrandingsMinAggregateOutputType | null
    _max: BrandingsMaxAggregateOutputType | null
  }

  export type BrandingsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
  }

  export type BrandingsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
  }

  export type BrandingsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    keywords: number
    _all: number
  }


  export type BrandingsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
  }

  export type BrandingsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
  }

  export type BrandingsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    keywords?: true
    _all?: true
  }

  export type BrandingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which brandings to aggregate.
     */
    where?: brandingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brandings to fetch.
     */
    orderBy?: brandingsOrderByWithRelationInput | brandingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: brandingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned brandings
    **/
    _count?: true | BrandingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandingsMaxAggregateInputType
  }

  export type GetBrandingsAggregateType<T extends BrandingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBrandings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrandings[P]>
      : GetScalarType<T[P], AggregateBrandings[P]>
  }




  export type brandingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: brandingsWhereInput
    orderBy?: brandingsOrderByWithAggregationInput | brandingsOrderByWithAggregationInput[]
    by: BrandingsScalarFieldEnum[] | BrandingsScalarFieldEnum
    having?: brandingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandingsCountAggregateInputType | true
    _min?: BrandingsMinAggregateInputType
    _max?: BrandingsMaxAggregateInputType
  }

  export type BrandingsGroupByOutputType = {
    id: string
    title: string
    description: string
    keywords: string[]
    _count: BrandingsCountAggregateOutputType | null
    _min: BrandingsMinAggregateOutputType | null
    _max: BrandingsMaxAggregateOutputType | null
  }

  type GetBrandingsGroupByPayload<T extends brandingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandingsGroupByOutputType[P]>
            : GetScalarType<T[P], BrandingsGroupByOutputType[P]>
        }
      >
    >


  export type brandingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    keywords?: boolean
  }, ExtArgs["result"]["brandings"]>

  export type brandingsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    keywords?: boolean
  }


  export type $brandingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "brandings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      keywords: string[]
    }, ExtArgs["result"]["brandings"]>
    composites: {}
  }


  type brandingsGetPayload<S extends boolean | null | undefined | brandingsDefaultArgs> = $Result.GetResult<Prisma.$brandingsPayload, S>

  type brandingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<brandingsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: BrandingsCountAggregateInputType | true
    }

  export interface brandingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brandings'], meta: { name: 'brandings' } }
    /**
     * Find zero or one Brandings that matches the filter.
     * @param {brandingsFindUniqueArgs} args - Arguments to find a Brandings
     * @example
     * // Get one Brandings
     * const brandings = await prisma.brandings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends brandingsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsFindUniqueArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Brandings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {brandingsFindUniqueOrThrowArgs} args - Arguments to find a Brandings
     * @example
     * // Get one Brandings
     * const brandings = await prisma.brandings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends brandingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Brandings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsFindFirstArgs} args - Arguments to find a Brandings
     * @example
     * // Get one Brandings
     * const brandings = await prisma.brandings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends brandingsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsFindFirstArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Brandings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsFindFirstOrThrowArgs} args - Arguments to find a Brandings
     * @example
     * // Get one Brandings
     * const brandings = await prisma.brandings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends brandingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Brandings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brandings
     * const brandings = await prisma.brandings.findMany()
     * 
     * // Get first 10 Brandings
     * const brandings = await prisma.brandings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandingsWithIdOnly = await prisma.brandings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends brandingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Brandings.
     * @param {brandingsCreateArgs} args - Arguments to create a Brandings.
     * @example
     * // Create one Brandings
     * const Brandings = await prisma.brandings.create({
     *   data: {
     *     // ... data to create a Brandings
     *   }
     * })
     * 
    **/
    create<T extends brandingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsCreateArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Brandings.
     *     @param {brandingsCreateManyArgs} args - Arguments to create many Brandings.
     *     @example
     *     // Create many Brandings
     *     const brandings = await prisma.brandings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends brandingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brandings.
     * @param {brandingsDeleteArgs} args - Arguments to delete one Brandings.
     * @example
     * // Delete one Brandings
     * const Brandings = await prisma.brandings.delete({
     *   where: {
     *     // ... filter to delete one Brandings
     *   }
     * })
     * 
    **/
    delete<T extends brandingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsDeleteArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Brandings.
     * @param {brandingsUpdateArgs} args - Arguments to update one Brandings.
     * @example
     * // Update one Brandings
     * const brandings = await prisma.brandings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends brandingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsUpdateArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Brandings.
     * @param {brandingsDeleteManyArgs} args - Arguments to filter Brandings to delete.
     * @example
     * // Delete a few Brandings
     * const { count } = await prisma.brandings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends brandingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, brandingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brandings
     * const brandings = await prisma.brandings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends brandingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brandings.
     * @param {brandingsUpsertArgs} args - Arguments to update or create a Brandings.
     * @example
     * // Update or create a Brandings
     * const brandings = await prisma.brandings.upsert({
     *   create: {
     *     // ... data to create a Brandings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brandings we want to update
     *   }
     * })
    **/
    upsert<T extends brandingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, brandingsUpsertArgs<ExtArgs>>
    ): Prisma__brandingsClient<$Result.GetResult<Prisma.$brandingsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Brandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsCountArgs} args - Arguments to filter Brandings to count.
     * @example
     * // Count the number of Brandings
     * const count = await prisma.brandings.count({
     *   where: {
     *     // ... the filter for the Brandings we want to count
     *   }
     * })
    **/
    count<T extends brandingsCountArgs>(
      args?: Subset<T, brandingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandingsAggregateArgs>(args: Subset<T, BrandingsAggregateArgs>): Prisma.PrismaPromise<GetBrandingsAggregateType<T>>

    /**
     * Group by Brandings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends brandingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: brandingsGroupByArgs['orderBy'] }
        : { orderBy?: brandingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, brandingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the brandings model
   */
  readonly fields: brandingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for brandings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__brandingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the brandings model
   */ 
  interface brandingsFieldRefs {
    readonly id: FieldRef<"brandings", 'String'>
    readonly title: FieldRef<"brandings", 'String'>
    readonly description: FieldRef<"brandings", 'String'>
    readonly keywords: FieldRef<"brandings", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * brandings findUnique
   */
  export type brandingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter, which brandings to fetch.
     */
    where: brandingsWhereUniqueInput
  }


  /**
   * brandings findUniqueOrThrow
   */
  export type brandingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter, which brandings to fetch.
     */
    where: brandingsWhereUniqueInput
  }


  /**
   * brandings findFirst
   */
  export type brandingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter, which brandings to fetch.
     */
    where?: brandingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brandings to fetch.
     */
    orderBy?: brandingsOrderByWithRelationInput | brandingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brandings.
     */
    cursor?: brandingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brandings.
     */
    distinct?: BrandingsScalarFieldEnum | BrandingsScalarFieldEnum[]
  }


  /**
   * brandings findFirstOrThrow
   */
  export type brandingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter, which brandings to fetch.
     */
    where?: brandingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brandings to fetch.
     */
    orderBy?: brandingsOrderByWithRelationInput | brandingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brandings.
     */
    cursor?: brandingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brandings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brandings.
     */
    distinct?: BrandingsScalarFieldEnum | BrandingsScalarFieldEnum[]
  }


  /**
   * brandings findMany
   */
  export type brandingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter, which brandings to fetch.
     */
    where?: brandingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brandings to fetch.
     */
    orderBy?: brandingsOrderByWithRelationInput | brandingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing brandings.
     */
    cursor?: brandingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brandings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brandings.
     */
    skip?: number
    distinct?: BrandingsScalarFieldEnum | BrandingsScalarFieldEnum[]
  }


  /**
   * brandings create
   */
  export type brandingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * The data needed to create a brandings.
     */
    data: XOR<brandingsCreateInput, brandingsUncheckedCreateInput>
  }


  /**
   * brandings createMany
   */
  export type brandingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many brandings.
     */
    data: brandingsCreateManyInput | brandingsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * brandings update
   */
  export type brandingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * The data needed to update a brandings.
     */
    data: XOR<brandingsUpdateInput, brandingsUncheckedUpdateInput>
    /**
     * Choose, which brandings to update.
     */
    where: brandingsWhereUniqueInput
  }


  /**
   * brandings updateMany
   */
  export type brandingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update brandings.
     */
    data: XOR<brandingsUpdateManyMutationInput, brandingsUncheckedUpdateManyInput>
    /**
     * Filter which brandings to update
     */
    where?: brandingsWhereInput
  }


  /**
   * brandings upsert
   */
  export type brandingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * The filter to search for the brandings to update in case it exists.
     */
    where: brandingsWhereUniqueInput
    /**
     * In case the brandings found by the `where` argument doesn't exist, create a new brandings with this data.
     */
    create: XOR<brandingsCreateInput, brandingsUncheckedCreateInput>
    /**
     * In case the brandings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<brandingsUpdateInput, brandingsUncheckedUpdateInput>
  }


  /**
   * brandings delete
   */
  export type brandingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
    /**
     * Filter which brandings to delete.
     */
    where: brandingsWhereUniqueInput
  }


  /**
   * brandings deleteMany
   */
  export type brandingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which brandings to delete
     */
    where?: brandingsWhereInput
  }


  /**
   * brandings without action
   */
  export type brandingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brandings
     */
    select?: brandingsSelect<ExtArgs> | null
  }



  /**
   * Model channels
   */

  export type AggregateChannels = {
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  export type ChannelsAvgAggregateOutputType = {
    viewCount: number | null
    subscriberCount: number | null
  }

  export type ChannelsSumAggregateOutputType = {
    viewCount: bigint | null
    subscriberCount: bigint | null
  }

  export type ChannelsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    customUrl: string | null
    publishedAt: Date | null
    viewCount: bigint | null
    subscriberCount: bigint | null
  }

  export type ChannelsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    customUrl: string | null
    publishedAt: Date | null
    viewCount: bigint | null
    subscriberCount: bigint | null
  }

  export type ChannelsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    customUrl: number
    publishedAt: number
    viewCount: number
    subscriberCount: number
    _all: number
  }


  export type ChannelsAvgAggregateInputType = {
    viewCount?: true
    subscriberCount?: true
  }

  export type ChannelsSumAggregateInputType = {
    viewCount?: true
    subscriberCount?: true
  }

  export type ChannelsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customUrl?: true
    publishedAt?: true
    viewCount?: true
    subscriberCount?: true
  }

  export type ChannelsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customUrl?: true
    publishedAt?: true
    viewCount?: true
    subscriberCount?: true
  }

  export type ChannelsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    customUrl?: true
    publishedAt?: true
    viewCount?: true
    subscriberCount?: true
    _all?: true
  }

  export type ChannelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channels to aggregate.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned channels
    **/
    _count?: true | ChannelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelsMaxAggregateInputType
  }

  export type GetChannelsAggregateType<T extends ChannelsAggregateArgs> = {
        [P in keyof T & keyof AggregateChannels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannels[P]>
      : GetScalarType<T[P], AggregateChannels[P]>
  }




  export type channelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: channelsWhereInput
    orderBy?: channelsOrderByWithAggregationInput | channelsOrderByWithAggregationInput[]
    by: ChannelsScalarFieldEnum[] | ChannelsScalarFieldEnum
    having?: channelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelsCountAggregateInputType | true
    _avg?: ChannelsAvgAggregateInputType
    _sum?: ChannelsSumAggregateInputType
    _min?: ChannelsMinAggregateInputType
    _max?: ChannelsMaxAggregateInputType
  }

  export type ChannelsGroupByOutputType = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date
    viewCount: bigint
    subscriberCount: bigint
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  type GetChannelsGroupByPayload<T extends channelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
        }
      >
    >


  export type channelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    customUrl?: boolean
    publishedAt?: boolean
    viewCount?: boolean
    subscriberCount?: boolean
    playlists?: boolean | channels$playlistsArgs<ExtArgs>
    videos?: boolean | channels$videosArgs<ExtArgs>
    _count?: boolean | ChannelsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channels"]>

  export type channelsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    customUrl?: boolean
    publishedAt?: boolean
    viewCount?: boolean
    subscriberCount?: boolean
  }

  export type channelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlists?: boolean | channels$playlistsArgs<ExtArgs>
    videos?: boolean | channels$videosArgs<ExtArgs>
    _count?: boolean | ChannelsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $channelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "channels"
    objects: {
      playlists: Prisma.$playlistsPayload<ExtArgs>[]
      videos: Prisma.$videosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      customUrl: string
      publishedAt: Date
      viewCount: bigint
      subscriberCount: bigint
    }, ExtArgs["result"]["channels"]>
    composites: {}
  }


  type channelsGetPayload<S extends boolean | null | undefined | channelsDefaultArgs> = $Result.GetResult<Prisma.$channelsPayload, S>

  type channelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<channelsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChannelsCountAggregateInputType | true
    }

  export interface channelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['channels'], meta: { name: 'channels' } }
    /**
     * Find zero or one Channels that matches the filter.
     * @param {channelsFindUniqueArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends channelsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, channelsFindUniqueArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {channelsFindUniqueOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends channelsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends channelsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsFindFirstArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends channelsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channels.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelsWithIdOnly = await prisma.channels.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends channelsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channels.
     * @param {channelsCreateArgs} args - Arguments to create a Channels.
     * @example
     * // Create one Channels
     * const Channels = await prisma.channels.create({
     *   data: {
     *     // ... data to create a Channels
     *   }
     * })
     * 
    **/
    create<T extends channelsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, channelsCreateArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {channelsCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channels = await prisma.channels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends channelsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channels.
     * @param {channelsDeleteArgs} args - Arguments to delete one Channels.
     * @example
     * // Delete one Channels
     * const Channels = await prisma.channels.delete({
     *   where: {
     *     // ... filter to delete one Channels
     *   }
     * })
     * 
    **/
    delete<T extends channelsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, channelsDeleteArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channels.
     * @param {channelsUpdateArgs} args - Arguments to update one Channels.
     * @example
     * // Update one Channels
     * const channels = await prisma.channels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends channelsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, channelsUpdateArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {channelsDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends channelsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, channelsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channels = await prisma.channels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends channelsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, channelsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channels.
     * @param {channelsUpsertArgs} args - Arguments to update or create a Channels.
     * @example
     * // Update or create a Channels
     * const channels = await prisma.channels.upsert({
     *   create: {
     *     // ... data to create a Channels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channels we want to update
     *   }
     * })
    **/
    upsert<T extends channelsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, channelsUpsertArgs<ExtArgs>>
    ): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channels.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends channelsCountArgs>(
      args?: Subset<T, channelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelsAggregateArgs>(args: Subset<T, ChannelsAggregateArgs>): Prisma.PrismaPromise<GetChannelsAggregateType<T>>

    /**
     * Group by Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends channelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: channelsGroupByArgs['orderBy'] }
        : { orderBy?: channelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, channelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the channels model
   */
  readonly fields: channelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for channels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__channelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlists<T extends channels$playlistsArgs<ExtArgs> = {}>(args?: Subset<T, channels$playlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findMany'> | Null>;

    videos<T extends channels$videosArgs<ExtArgs> = {}>(args?: Subset<T, channels$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the channels model
   */ 
  interface channelsFieldRefs {
    readonly id: FieldRef<"channels", 'String'>
    readonly title: FieldRef<"channels", 'String'>
    readonly description: FieldRef<"channels", 'String'>
    readonly customUrl: FieldRef<"channels", 'String'>
    readonly publishedAt: FieldRef<"channels", 'DateTime'>
    readonly viewCount: FieldRef<"channels", 'BigInt'>
    readonly subscriberCount: FieldRef<"channels", 'BigInt'>
  }
    

  // Custom InputTypes

  /**
   * channels findUnique
   */
  export type channelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels findUniqueOrThrow
   */
  export type channelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels findFirst
   */
  export type channelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }


  /**
   * channels findFirstOrThrow
   */
  export type channelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }


  /**
   * channels findMany
   */
  export type channelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: channelsOrderByWithRelationInput | channelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    distinct?: ChannelsScalarFieldEnum | ChannelsScalarFieldEnum[]
  }


  /**
   * channels create
   */
  export type channelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The data needed to create a channels.
     */
    data: XOR<channelsCreateInput, channelsUncheckedCreateInput>
  }


  /**
   * channels createMany
   */
  export type channelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many channels.
     */
    data: channelsCreateManyInput | channelsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * channels update
   */
  export type channelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The data needed to update a channels.
     */
    data: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
    /**
     * Choose, which channels to update.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels updateMany
   */
  export type channelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update channels.
     */
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyInput>
    /**
     * Filter which channels to update
     */
    where?: channelsWhereInput
  }


  /**
   * channels upsert
   */
  export type channelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * The filter to search for the channels to update in case it exists.
     */
    where: channelsWhereUniqueInput
    /**
     * In case the channels found by the `where` argument doesn't exist, create a new channels with this data.
     */
    create: XOR<channelsCreateInput, channelsUncheckedCreateInput>
    /**
     * In case the channels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
  }


  /**
   * channels delete
   */
  export type channelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
    /**
     * Filter which channels to delete.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels deleteMany
   */
  export type channelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which channels to delete
     */
    where?: channelsWhereInput
  }


  /**
   * channels.playlists
   */
  export type channels$playlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    where?: playlistsWhereInput
    orderBy?: playlistsOrderByWithRelationInput | playlistsOrderByWithRelationInput[]
    cursor?: playlistsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistsScalarFieldEnum | PlaylistsScalarFieldEnum[]
  }


  /**
   * channels.videos
   */
  export type channels$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    where?: videosWhereInput
    orderBy?: videosOrderByWithRelationInput | videosOrderByWithRelationInput[]
    cursor?: videosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideosScalarFieldEnum | VideosScalarFieldEnum[]
  }


  /**
   * channels without action
   */
  export type channelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude<ExtArgs> | null
  }



  /**
   * Model comments
   */

  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    viewerRating: number | null
    likeCount: number | null
  }

  export type CommentsSumAggregateOutputType = {
    viewerRating: number | null
    likeCount: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: string | null
    channelId: string | null
    videoId: string | null
    topLevelCommentId: string | null
    textDisplay: string | null
    textOriginal: string | null
    authorNameDisplay: string | null
    authorProfileImageUrl: string | null
    authorChannelUrl: string | null
    canRate: boolean | null
    viewerRating: number | null
    likeCount: number | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: string | null
    channelId: string | null
    videoId: string | null
    topLevelCommentId: string | null
    textDisplay: string | null
    textOriginal: string | null
    authorNameDisplay: string | null
    authorProfileImageUrl: string | null
    authorChannelUrl: string | null
    canRate: boolean | null
    viewerRating: number | null
    likeCount: number | null
    publishedAt: Date | null
    updatedAt: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    channelId: number
    videoId: number
    topLevelCommentId: number
    textDisplay: number
    textOriginal: number
    authorNameDisplay: number
    authorProfileImageUrl: number
    authorChannelUrl: number
    canRate: number
    viewerRating: number
    likeCount: number
    publishedAt: number
    updatedAt: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    viewerRating?: true
    likeCount?: true
  }

  export type CommentsSumAggregateInputType = {
    viewerRating?: true
    likeCount?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    channelId?: true
    videoId?: true
    topLevelCommentId?: true
    textDisplay?: true
    textOriginal?: true
    authorNameDisplay?: true
    authorProfileImageUrl?: true
    authorChannelUrl?: true
    canRate?: true
    viewerRating?: true
    likeCount?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    channelId?: true
    videoId?: true
    topLevelCommentId?: true
    textDisplay?: true
    textOriginal?: true
    authorNameDisplay?: true
    authorProfileImageUrl?: true
    authorChannelUrl?: true
    canRate?: true
    viewerRating?: true
    likeCount?: true
    publishedAt?: true
    updatedAt?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    channelId?: true
    videoId?: true
    topLevelCommentId?: true
    textDisplay?: true
    textOriginal?: true
    authorNameDisplay?: true
    authorProfileImageUrl?: true
    authorChannelUrl?: true
    canRate?: true
    viewerRating?: true
    likeCount?: true
    publishedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to aggregate.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type commentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commentsWhereInput
    orderBy?: commentsOrderByWithAggregationInput | commentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }

  export type CommentsGroupByOutputType = {
    id: string
    channelId: string
    videoId: string
    topLevelCommentId: string | null
    textDisplay: string
    textOriginal: string
    authorNameDisplay: string
    authorProfileImageUrl: string
    authorChannelUrl: string
    canRate: boolean
    viewerRating: number
    likeCount: number
    publishedAt: Date
    updatedAt: Date
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends commentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type commentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    channelId?: boolean
    videoId?: boolean
    topLevelCommentId?: boolean
    textDisplay?: boolean
    textOriginal?: boolean
    authorNameDisplay?: boolean
    authorProfileImageUrl?: boolean
    authorChannelUrl?: boolean
    canRate?: boolean
    viewerRating?: boolean
    likeCount?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["comments"]>

  export type commentsSelectScalar = {
    id?: boolean
    channelId?: boolean
    videoId?: boolean
    topLevelCommentId?: boolean
    textDisplay?: boolean
    textOriginal?: boolean
    authorNameDisplay?: boolean
    authorProfileImageUrl?: boolean
    authorChannelUrl?: boolean
    canRate?: boolean
    viewerRating?: boolean
    likeCount?: boolean
    publishedAt?: boolean
    updatedAt?: boolean
  }


  export type $commentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comments"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      channelId: string
      videoId: string
      topLevelCommentId: string | null
      textDisplay: string
      textOriginal: string
      authorNameDisplay: string
      authorProfileImageUrl: string
      authorChannelUrl: string
      canRate: boolean
      viewerRating: number
      likeCount: number
      publishedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comments"]>
    composites: {}
  }


  type commentsGetPayload<S extends boolean | null | undefined | commentsDefaultArgs> = $Result.GetResult<Prisma.$commentsPayload, S>

  type commentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commentsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface commentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comments'], meta: { name: 'comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {commentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commentsFindUniqueArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsCreateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {commentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commentsDeleteArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commentsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commentsUpsertArgs<ExtArgs>>
    ): Prisma__commentsClient<$Result.GetResult<Prisma.$commentsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentsCountArgs>(
      args?: Subset<T, commentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commentsGroupByArgs['orderBy'] }
        : { orderBy?: commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comments model
   */
  readonly fields: commentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the comments model
   */ 
  interface commentsFieldRefs {
    readonly id: FieldRef<"comments", 'String'>
    readonly channelId: FieldRef<"comments", 'String'>
    readonly videoId: FieldRef<"comments", 'String'>
    readonly topLevelCommentId: FieldRef<"comments", 'String'>
    readonly textDisplay: FieldRef<"comments", 'String'>
    readonly textOriginal: FieldRef<"comments", 'String'>
    readonly authorNameDisplay: FieldRef<"comments", 'String'>
    readonly authorProfileImageUrl: FieldRef<"comments", 'String'>
    readonly authorChannelUrl: FieldRef<"comments", 'String'>
    readonly canRate: FieldRef<"comments", 'Boolean'>
    readonly viewerRating: FieldRef<"comments", 'Int'>
    readonly likeCount: FieldRef<"comments", 'Int'>
    readonly publishedAt: FieldRef<"comments", 'DateTime'>
    readonly updatedAt: FieldRef<"comments", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * comments findUnique
   */
  export type commentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findUniqueOrThrow
   */
  export type commentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments findFirst
   */
  export type commentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findFirstOrThrow
   */
  export type commentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments findMany
   */
  export type commentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: commentsOrderByWithRelationInput | commentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }


  /**
   * comments create
   */
  export type commentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * The data needed to create a comments.
     */
    data: XOR<commentsCreateInput, commentsUncheckedCreateInput>
  }


  /**
   * comments createMany
   */
  export type commentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comments.
     */
    data: commentsCreateManyInput | commentsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * The data needed to update a comments.
     */
    data: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
    /**
     * Choose, which comments to update.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentsUpdateManyMutationInput, commentsUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * The filter to search for the comments to update in case it exists.
     */
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
     */
    create: XOR<commentsCreateInput, commentsUncheckedCreateInput>
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentsUpdateInput, commentsUncheckedUpdateInput>
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
    /**
     * Filter which comments to delete.
     */
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comments to delete
     */
    where?: commentsWhereInput
  }


  /**
   * comments without action
   */
  export type commentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comments
     */
    select?: commentsSelect<ExtArgs> | null
  }



  /**
   * Model playlist_videos
   */

  export type AggregatePlaylist_videos = {
    _count: Playlist_videosCountAggregateOutputType | null
    _min: Playlist_videosMinAggregateOutputType | null
    _max: Playlist_videosMaxAggregateOutputType | null
  }

  export type Playlist_videosMinAggregateOutputType = {
    videoId: string | null
    playlistId: string | null
  }

  export type Playlist_videosMaxAggregateOutputType = {
    videoId: string | null
    playlistId: string | null
  }

  export type Playlist_videosCountAggregateOutputType = {
    videoId: number
    playlistId: number
    _all: number
  }


  export type Playlist_videosMinAggregateInputType = {
    videoId?: true
    playlistId?: true
  }

  export type Playlist_videosMaxAggregateInputType = {
    videoId?: true
    playlistId?: true
  }

  export type Playlist_videosCountAggregateInputType = {
    videoId?: true
    playlistId?: true
    _all?: true
  }

  export type Playlist_videosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which playlist_videos to aggregate.
     */
    where?: playlist_videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlist_videos to fetch.
     */
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: playlist_videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlist_videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlist_videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned playlist_videos
    **/
    _count?: true | Playlist_videosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Playlist_videosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Playlist_videosMaxAggregateInputType
  }

  export type GetPlaylist_videosAggregateType<T extends Playlist_videosAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist_videos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist_videos[P]>
      : GetScalarType<T[P], AggregatePlaylist_videos[P]>
  }




  export type playlist_videosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: playlist_videosWhereInput
    orderBy?: playlist_videosOrderByWithAggregationInput | playlist_videosOrderByWithAggregationInput[]
    by: Playlist_videosScalarFieldEnum[] | Playlist_videosScalarFieldEnum
    having?: playlist_videosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Playlist_videosCountAggregateInputType | true
    _min?: Playlist_videosMinAggregateInputType
    _max?: Playlist_videosMaxAggregateInputType
  }

  export type Playlist_videosGroupByOutputType = {
    videoId: string
    playlistId: string
    _count: Playlist_videosCountAggregateOutputType | null
    _min: Playlist_videosMinAggregateOutputType | null
    _max: Playlist_videosMaxAggregateOutputType | null
  }

  type GetPlaylist_videosGroupByPayload<T extends playlist_videosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Playlist_videosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Playlist_videosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Playlist_videosGroupByOutputType[P]>
            : GetScalarType<T[P], Playlist_videosGroupByOutputType[P]>
        }
      >
    >


  export type playlist_videosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    videoId?: boolean
    playlistId?: boolean
    playlists?: boolean | playlistsDefaultArgs<ExtArgs>
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist_videos"]>

  export type playlist_videosSelectScalar = {
    videoId?: boolean
    playlistId?: boolean
  }

  export type playlist_videosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlists?: boolean | playlistsDefaultArgs<ExtArgs>
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }


  export type $playlist_videosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "playlist_videos"
    objects: {
      playlists: Prisma.$playlistsPayload<ExtArgs>
      videos: Prisma.$videosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      videoId: string
      playlistId: string
    }, ExtArgs["result"]["playlist_videos"]>
    composites: {}
  }


  type playlist_videosGetPayload<S extends boolean | null | undefined | playlist_videosDefaultArgs> = $Result.GetResult<Prisma.$playlist_videosPayload, S>

  type playlist_videosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<playlist_videosFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Playlist_videosCountAggregateInputType | true
    }

  export interface playlist_videosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['playlist_videos'], meta: { name: 'playlist_videos' } }
    /**
     * Find zero or one Playlist_videos that matches the filter.
     * @param {playlist_videosFindUniqueArgs} args - Arguments to find a Playlist_videos
     * @example
     * // Get one Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends playlist_videosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosFindUniqueArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Playlist_videos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {playlist_videosFindUniqueOrThrowArgs} args - Arguments to find a Playlist_videos
     * @example
     * // Get one Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends playlist_videosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Playlist_videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosFindFirstArgs} args - Arguments to find a Playlist_videos
     * @example
     * // Get one Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends playlist_videosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosFindFirstArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Playlist_videos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosFindFirstOrThrowArgs} args - Arguments to find a Playlist_videos
     * @example
     * // Get one Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends playlist_videosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Playlist_videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findMany()
     * 
     * // Get first 10 Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.findMany({ take: 10 })
     * 
     * // Only select the `videoId`
     * const playlist_videosWithVideoIdOnly = await prisma.playlist_videos.findMany({ select: { videoId: true } })
     * 
    **/
    findMany<T extends playlist_videosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Playlist_videos.
     * @param {playlist_videosCreateArgs} args - Arguments to create a Playlist_videos.
     * @example
     * // Create one Playlist_videos
     * const Playlist_videos = await prisma.playlist_videos.create({
     *   data: {
     *     // ... data to create a Playlist_videos
     *   }
     * })
     * 
    **/
    create<T extends playlist_videosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosCreateArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Playlist_videos.
     *     @param {playlist_videosCreateManyArgs} args - Arguments to create many Playlist_videos.
     *     @example
     *     // Create many Playlist_videos
     *     const playlist_videos = await prisma.playlist_videos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends playlist_videosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlist_videos.
     * @param {playlist_videosDeleteArgs} args - Arguments to delete one Playlist_videos.
     * @example
     * // Delete one Playlist_videos
     * const Playlist_videos = await prisma.playlist_videos.delete({
     *   where: {
     *     // ... filter to delete one Playlist_videos
     *   }
     * })
     * 
    **/
    delete<T extends playlist_videosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosDeleteArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Playlist_videos.
     * @param {playlist_videosUpdateArgs} args - Arguments to update one Playlist_videos.
     * @example
     * // Update one Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends playlist_videosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosUpdateArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Playlist_videos.
     * @param {playlist_videosDeleteManyArgs} args - Arguments to filter Playlist_videos to delete.
     * @example
     * // Delete a few Playlist_videos
     * const { count } = await prisma.playlist_videos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends playlist_videosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlist_videosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlist_videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends playlist_videosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlist_videos.
     * @param {playlist_videosUpsertArgs} args - Arguments to update or create a Playlist_videos.
     * @example
     * // Update or create a Playlist_videos
     * const playlist_videos = await prisma.playlist_videos.upsert({
     *   create: {
     *     // ... data to create a Playlist_videos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist_videos we want to update
     *   }
     * })
    **/
    upsert<T extends playlist_videosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, playlist_videosUpsertArgs<ExtArgs>>
    ): Prisma__playlist_videosClient<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Playlist_videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosCountArgs} args - Arguments to filter Playlist_videos to count.
     * @example
     * // Count the number of Playlist_videos
     * const count = await prisma.playlist_videos.count({
     *   where: {
     *     // ... the filter for the Playlist_videos we want to count
     *   }
     * })
    **/
    count<T extends playlist_videosCountArgs>(
      args?: Subset<T, playlist_videosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Playlist_videosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist_videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Playlist_videosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Playlist_videosAggregateArgs>(args: Subset<T, Playlist_videosAggregateArgs>): Prisma.PrismaPromise<GetPlaylist_videosAggregateType<T>>

    /**
     * Group by Playlist_videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlist_videosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends playlist_videosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: playlist_videosGroupByArgs['orderBy'] }
        : { orderBy?: playlist_videosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, playlist_videosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylist_videosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the playlist_videos model
   */
  readonly fields: playlist_videosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for playlist_videos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__playlist_videosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlists<T extends playlistsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, playlistsDefaultArgs<ExtArgs>>): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    videos<T extends videosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, videosDefaultArgs<ExtArgs>>): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the playlist_videos model
   */ 
  interface playlist_videosFieldRefs {
    readonly videoId: FieldRef<"playlist_videos", 'String'>
    readonly playlistId: FieldRef<"playlist_videos", 'String'>
  }
    

  // Custom InputTypes

  /**
   * playlist_videos findUnique
   */
  export type playlist_videosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter, which playlist_videos to fetch.
     */
    where: playlist_videosWhereUniqueInput
  }


  /**
   * playlist_videos findUniqueOrThrow
   */
  export type playlist_videosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter, which playlist_videos to fetch.
     */
    where: playlist_videosWhereUniqueInput
  }


  /**
   * playlist_videos findFirst
   */
  export type playlist_videosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter, which playlist_videos to fetch.
     */
    where?: playlist_videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlist_videos to fetch.
     */
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for playlist_videos.
     */
    cursor?: playlist_videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlist_videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlist_videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of playlist_videos.
     */
    distinct?: Playlist_videosScalarFieldEnum | Playlist_videosScalarFieldEnum[]
  }


  /**
   * playlist_videos findFirstOrThrow
   */
  export type playlist_videosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter, which playlist_videos to fetch.
     */
    where?: playlist_videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlist_videos to fetch.
     */
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for playlist_videos.
     */
    cursor?: playlist_videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlist_videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlist_videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of playlist_videos.
     */
    distinct?: Playlist_videosScalarFieldEnum | Playlist_videosScalarFieldEnum[]
  }


  /**
   * playlist_videos findMany
   */
  export type playlist_videosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter, which playlist_videos to fetch.
     */
    where?: playlist_videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlist_videos to fetch.
     */
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing playlist_videos.
     */
    cursor?: playlist_videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlist_videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlist_videos.
     */
    skip?: number
    distinct?: Playlist_videosScalarFieldEnum | Playlist_videosScalarFieldEnum[]
  }


  /**
   * playlist_videos create
   */
  export type playlist_videosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * The data needed to create a playlist_videos.
     */
    data: XOR<playlist_videosCreateInput, playlist_videosUncheckedCreateInput>
  }


  /**
   * playlist_videos createMany
   */
  export type playlist_videosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many playlist_videos.
     */
    data: playlist_videosCreateManyInput | playlist_videosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * playlist_videos update
   */
  export type playlist_videosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * The data needed to update a playlist_videos.
     */
    data: XOR<playlist_videosUpdateInput, playlist_videosUncheckedUpdateInput>
    /**
     * Choose, which playlist_videos to update.
     */
    where: playlist_videosWhereUniqueInput
  }


  /**
   * playlist_videos updateMany
   */
  export type playlist_videosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update playlist_videos.
     */
    data: XOR<playlist_videosUpdateManyMutationInput, playlist_videosUncheckedUpdateManyInput>
    /**
     * Filter which playlist_videos to update
     */
    where?: playlist_videosWhereInput
  }


  /**
   * playlist_videos upsert
   */
  export type playlist_videosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * The filter to search for the playlist_videos to update in case it exists.
     */
    where: playlist_videosWhereUniqueInput
    /**
     * In case the playlist_videos found by the `where` argument doesn't exist, create a new playlist_videos with this data.
     */
    create: XOR<playlist_videosCreateInput, playlist_videosUncheckedCreateInput>
    /**
     * In case the playlist_videos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<playlist_videosUpdateInput, playlist_videosUncheckedUpdateInput>
  }


  /**
   * playlist_videos delete
   */
  export type playlist_videosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    /**
     * Filter which playlist_videos to delete.
     */
    where: playlist_videosWhereUniqueInput
  }


  /**
   * playlist_videos deleteMany
   */
  export type playlist_videosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which playlist_videos to delete
     */
    where?: playlist_videosWhereInput
  }


  /**
   * playlist_videos without action
   */
  export type playlist_videosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
  }



  /**
   * Model playlists
   */

  export type AggregatePlaylists = {
    _count: PlaylistsCountAggregateOutputType | null
    _min: PlaylistsMinAggregateOutputType | null
    _max: PlaylistsMaxAggregateOutputType | null
  }

  export type PlaylistsMinAggregateOutputType = {
    id: string | null
    publishedAt: Date | null
    channelId: string | null
    title: string | null
    description: string | null
    defaultLanguage: string | null
  }

  export type PlaylistsMaxAggregateOutputType = {
    id: string | null
    publishedAt: Date | null
    channelId: string | null
    title: string | null
    description: string | null
    defaultLanguage: string | null
  }

  export type PlaylistsCountAggregateOutputType = {
    id: number
    publishedAt: number
    channelId: number
    title: number
    description: number
    defaultLanguage: number
    _all: number
  }


  export type PlaylistsMinAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    defaultLanguage?: true
  }

  export type PlaylistsMaxAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    defaultLanguage?: true
  }

  export type PlaylistsCountAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    defaultLanguage?: true
    _all?: true
  }

  export type PlaylistsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which playlists to aggregate.
     */
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     */
    orderBy?: playlistsOrderByWithRelationInput | playlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned playlists
    **/
    _count?: true | PlaylistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistsMaxAggregateInputType
  }

  export type GetPlaylistsAggregateType<T extends PlaylistsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylists[P]>
      : GetScalarType<T[P], AggregatePlaylists[P]>
  }




  export type playlistsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: playlistsWhereInput
    orderBy?: playlistsOrderByWithAggregationInput | playlistsOrderByWithAggregationInput[]
    by: PlaylistsScalarFieldEnum[] | PlaylistsScalarFieldEnum
    having?: playlistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistsCountAggregateInputType | true
    _min?: PlaylistsMinAggregateInputType
    _max?: PlaylistsMaxAggregateInputType
  }

  export type PlaylistsGroupByOutputType = {
    id: string
    publishedAt: Date
    channelId: string
    title: string
    description: string
    defaultLanguage: string | null
    _count: PlaylistsCountAggregateOutputType | null
    _min: PlaylistsMinAggregateOutputType | null
    _max: PlaylistsMaxAggregateOutputType | null
  }

  type GetPlaylistsGroupByPayload<T extends playlistsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistsGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistsGroupByOutputType[P]>
        }
      >
    >


  export type playlistsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publishedAt?: boolean
    channelId?: boolean
    title?: boolean
    description?: boolean
    defaultLanguage?: boolean
    playlist_videos?: boolean | playlists$playlist_videosArgs<ExtArgs>
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    _count?: boolean | PlaylistsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlists"]>

  export type playlistsSelectScalar = {
    id?: boolean
    publishedAt?: boolean
    channelId?: boolean
    title?: boolean
    description?: boolean
    defaultLanguage?: boolean
  }

  export type playlistsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist_videos?: boolean | playlists$playlist_videosArgs<ExtArgs>
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    _count?: boolean | PlaylistsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $playlistsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "playlists"
    objects: {
      playlist_videos: Prisma.$playlist_videosPayload<ExtArgs>[]
      channels: Prisma.$channelsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publishedAt: Date
      channelId: string
      title: string
      description: string
      defaultLanguage: string | null
    }, ExtArgs["result"]["playlists"]>
    composites: {}
  }


  type playlistsGetPayload<S extends boolean | null | undefined | playlistsDefaultArgs> = $Result.GetResult<Prisma.$playlistsPayload, S>

  type playlistsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<playlistsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PlaylistsCountAggregateInputType | true
    }

  export interface playlistsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['playlists'], meta: { name: 'playlists' } }
    /**
     * Find zero or one Playlists that matches the filter.
     * @param {playlistsFindUniqueArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends playlistsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsFindUniqueArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Playlists that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {playlistsFindUniqueOrThrowArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends playlistsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsFindFirstArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends playlistsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsFindFirstArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Playlists that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsFindFirstOrThrowArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends playlistsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlists.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistsWithIdOnly = await prisma.playlists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends playlistsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Playlists.
     * @param {playlistsCreateArgs} args - Arguments to create a Playlists.
     * @example
     * // Create one Playlists
     * const Playlists = await prisma.playlists.create({
     *   data: {
     *     // ... data to create a Playlists
     *   }
     * })
     * 
    **/
    create<T extends playlistsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsCreateArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Playlists.
     *     @param {playlistsCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlists = await prisma.playlists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends playlistsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlists.
     * @param {playlistsDeleteArgs} args - Arguments to delete one Playlists.
     * @example
     * // Delete one Playlists
     * const Playlists = await prisma.playlists.delete({
     *   where: {
     *     // ... filter to delete one Playlists
     *   }
     * })
     * 
    **/
    delete<T extends playlistsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsDeleteArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Playlists.
     * @param {playlistsUpdateArgs} args - Arguments to update one Playlists.
     * @example
     * // Update one Playlists
     * const playlists = await prisma.playlists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends playlistsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsUpdateArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Playlists.
     * @param {playlistsDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends playlistsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, playlistsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlists = await prisma.playlists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends playlistsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlists.
     * @param {playlistsUpsertArgs} args - Arguments to update or create a Playlists.
     * @example
     * // Update or create a Playlists
     * const playlists = await prisma.playlists.upsert({
     *   create: {
     *     // ... data to create a Playlists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlists we want to update
     *   }
     * })
    **/
    upsert<T extends playlistsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, playlistsUpsertArgs<ExtArgs>>
    ): Prisma__playlistsClient<$Result.GetResult<Prisma.$playlistsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlists.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends playlistsCountArgs>(
      args?: Subset<T, playlistsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistsAggregateArgs>(args: Subset<T, PlaylistsAggregateArgs>): Prisma.PrismaPromise<GetPlaylistsAggregateType<T>>

    /**
     * Group by Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends playlistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: playlistsGroupByArgs['orderBy'] }
        : { orderBy?: playlistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, playlistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the playlists model
   */
  readonly fields: playlistsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for playlists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__playlistsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlist_videos<T extends playlists$playlist_videosArgs<ExtArgs> = {}>(args?: Subset<T, playlists$playlist_videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findMany'> | Null>;

    channels<T extends channelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, channelsDefaultArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the playlists model
   */ 
  interface playlistsFieldRefs {
    readonly id: FieldRef<"playlists", 'String'>
    readonly publishedAt: FieldRef<"playlists", 'DateTime'>
    readonly channelId: FieldRef<"playlists", 'String'>
    readonly title: FieldRef<"playlists", 'String'>
    readonly description: FieldRef<"playlists", 'String'>
    readonly defaultLanguage: FieldRef<"playlists", 'String'>
  }
    

  // Custom InputTypes

  /**
   * playlists findUnique
   */
  export type playlistsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter, which playlists to fetch.
     */
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists findUniqueOrThrow
   */
  export type playlistsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter, which playlists to fetch.
     */
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists findFirst
   */
  export type playlistsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter, which playlists to fetch.
     */
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     */
    orderBy?: playlistsOrderByWithRelationInput | playlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for playlists.
     */
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of playlists.
     */
    distinct?: PlaylistsScalarFieldEnum | PlaylistsScalarFieldEnum[]
  }


  /**
   * playlists findFirstOrThrow
   */
  export type playlistsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter, which playlists to fetch.
     */
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     */
    orderBy?: playlistsOrderByWithRelationInput | playlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for playlists.
     */
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of playlists.
     */
    distinct?: PlaylistsScalarFieldEnum | PlaylistsScalarFieldEnum[]
  }


  /**
   * playlists findMany
   */
  export type playlistsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter, which playlists to fetch.
     */
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     */
    orderBy?: playlistsOrderByWithRelationInput | playlistsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing playlists.
     */
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     */
    skip?: number
    distinct?: PlaylistsScalarFieldEnum | PlaylistsScalarFieldEnum[]
  }


  /**
   * playlists create
   */
  export type playlistsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * The data needed to create a playlists.
     */
    data: XOR<playlistsCreateInput, playlistsUncheckedCreateInput>
  }


  /**
   * playlists createMany
   */
  export type playlistsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many playlists.
     */
    data: playlistsCreateManyInput | playlistsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * playlists update
   */
  export type playlistsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * The data needed to update a playlists.
     */
    data: XOR<playlistsUpdateInput, playlistsUncheckedUpdateInput>
    /**
     * Choose, which playlists to update.
     */
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists updateMany
   */
  export type playlistsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update playlists.
     */
    data: XOR<playlistsUpdateManyMutationInput, playlistsUncheckedUpdateManyInput>
    /**
     * Filter which playlists to update
     */
    where?: playlistsWhereInput
  }


  /**
   * playlists upsert
   */
  export type playlistsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * The filter to search for the playlists to update in case it exists.
     */
    where: playlistsWhereUniqueInput
    /**
     * In case the playlists found by the `where` argument doesn't exist, create a new playlists with this data.
     */
    create: XOR<playlistsCreateInput, playlistsUncheckedCreateInput>
    /**
     * In case the playlists was found with the provided `where` argument, update it with this data.
     */
    update: XOR<playlistsUpdateInput, playlistsUncheckedUpdateInput>
  }


  /**
   * playlists delete
   */
  export type playlistsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
    /**
     * Filter which playlists to delete.
     */
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists deleteMany
   */
  export type playlistsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which playlists to delete
     */
    where?: playlistsWhereInput
  }


  /**
   * playlists.playlist_videos
   */
  export type playlists$playlist_videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    where?: playlist_videosWhereInput
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    cursor?: playlist_videosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Playlist_videosScalarFieldEnum | Playlist_videosScalarFieldEnum[]
  }


  /**
   * playlists without action
   */
  export type playlistsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlists
     */
    select?: playlistsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlistsInclude<ExtArgs> | null
  }



  /**
   * Model tags
   */

  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsMinAggregateOutputType = {
    id: string | null
    videoId: string | null
    text: string | null
  }

  export type TagsMaxAggregateOutputType = {
    id: string | null
    videoId: string | null
    text: string | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    videoId: number
    text: number
    _all: number
  }


  export type TagsMinAggregateInputType = {
    id?: true
    videoId?: true
    text?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    videoId?: true
    text?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    videoId?: true
    text?: true
    _all?: true
  }

  export type TagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tags to aggregate.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type tagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tagsWhereInput
    orderBy?: tagsOrderByWithAggregationInput | tagsOrderByWithAggregationInput[]
    by: TagsScalarFieldEnum[] | TagsScalarFieldEnum
    having?: tagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }

  export type TagsGroupByOutputType = {
    id: string
    videoId: string
    text: string
    _count: TagsCountAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends tagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type tagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    text?: boolean
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tags"]>

  export type tagsSelectScalar = {
    id?: boolean
    videoId?: boolean
    text?: boolean
  }

  export type tagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }


  export type $tagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tags"
    objects: {
      videos: Prisma.$videosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      videoId: string
      text: string
    }, ExtArgs["result"]["tags"]>
    composites: {}
  }


  type tagsGetPayload<S extends boolean | null | undefined | tagsDefaultArgs> = $Result.GetResult<Prisma.$tagsPayload, S>

  type tagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tagsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TagsCountAggregateInputType | true
    }

  export interface tagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tags'], meta: { name: 'tags' } }
    /**
     * Find zero or one Tags that matches the filter.
     * @param {tagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tagsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tagsFindUniqueArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tagsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tagsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindFirstArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tagsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tagsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tags.
     * @param {tagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
    **/
    create<T extends tagsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tagsCreateArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {tagsCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tags = await prisma.tags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tagsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tags.
     * @param {tagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
    **/
    delete<T extends tagsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tagsDeleteArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tags.
     * @param {tagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tagsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpdateArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {tagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tagsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tagsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tags.
     * @param {tagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
    **/
    upsert<T extends tagsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpsertArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends tagsCountArgs>(
      args?: Subset<T, tagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): Prisma.PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tagsGroupByArgs['orderBy'] }
        : { orderBy?: tagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tags model
   */
  readonly fields: tagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    videos<T extends videosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, videosDefaultArgs<ExtArgs>>): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the tags model
   */ 
  interface tagsFieldRefs {
    readonly id: FieldRef<"tags", 'String'>
    readonly videoId: FieldRef<"tags", 'String'>
    readonly text: FieldRef<"tags", 'String'>
  }
    

  // Custom InputTypes

  /**
   * tags findUnique
   */
  export type tagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where: tagsWhereUniqueInput
  }


  /**
   * tags findUniqueOrThrow
   */
  export type tagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where: tagsWhereUniqueInput
  }


  /**
   * tags findFirst
   */
  export type tagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * tags findFirstOrThrow
   */
  export type tagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * tags findMany
   */
  export type tagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * tags create
   */
  export type tagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The data needed to create a tags.
     */
    data: XOR<tagsCreateInput, tagsUncheckedCreateInput>
  }


  /**
   * tags createMany
   */
  export type tagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tags.
     */
    data: tagsCreateManyInput | tagsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tags update
   */
  export type tagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The data needed to update a tags.
     */
    data: XOR<tagsUpdateInput, tagsUncheckedUpdateInput>
    /**
     * Choose, which tags to update.
     */
    where: tagsWhereUniqueInput
  }


  /**
   * tags updateMany
   */
  export type tagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tags.
     */
    data: XOR<tagsUpdateManyMutationInput, tagsUncheckedUpdateManyInput>
    /**
     * Filter which tags to update
     */
    where?: tagsWhereInput
  }


  /**
   * tags upsert
   */
  export type tagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The filter to search for the tags to update in case it exists.
     */
    where: tagsWhereUniqueInput
    /**
     * In case the tags found by the `where` argument doesn't exist, create a new tags with this data.
     */
    create: XOR<tagsCreateInput, tagsUncheckedCreateInput>
    /**
     * In case the tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tagsUpdateInput, tagsUncheckedUpdateInput>
  }


  /**
   * tags delete
   */
  export type tagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter which tags to delete.
     */
    where: tagsWhereUniqueInput
  }


  /**
   * tags deleteMany
   */
  export type tagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tags to delete
     */
    where?: tagsWhereInput
  }


  /**
   * tags without action
   */
  export type tagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
  }



  /**
   * Model thumbnails
   */

  export type AggregateThumbnails = {
    _count: ThumbnailsCountAggregateOutputType | null
    _avg: ThumbnailsAvgAggregateOutputType | null
    _sum: ThumbnailsSumAggregateOutputType | null
    _min: ThumbnailsMinAggregateOutputType | null
    _max: ThumbnailsMaxAggregateOutputType | null
  }

  export type ThumbnailsAvgAggregateOutputType = {
    widthDefault: number | null
    heightDefault: number | null
  }

  export type ThumbnailsSumAggregateOutputType = {
    widthDefault: number | null
    heightDefault: number | null
  }

  export type ThumbnailsMinAggregateOutputType = {
    id: string | null
    urlDefault: string | null
    widthDefault: number | null
    heightDefault: number | null
    videoId: string | null
  }

  export type ThumbnailsMaxAggregateOutputType = {
    id: string | null
    urlDefault: string | null
    widthDefault: number | null
    heightDefault: number | null
    videoId: string | null
  }

  export type ThumbnailsCountAggregateOutputType = {
    id: number
    urlDefault: number
    widthDefault: number
    heightDefault: number
    videoId: number
    _all: number
  }


  export type ThumbnailsAvgAggregateInputType = {
    widthDefault?: true
    heightDefault?: true
  }

  export type ThumbnailsSumAggregateInputType = {
    widthDefault?: true
    heightDefault?: true
  }

  export type ThumbnailsMinAggregateInputType = {
    id?: true
    urlDefault?: true
    widthDefault?: true
    heightDefault?: true
    videoId?: true
  }

  export type ThumbnailsMaxAggregateInputType = {
    id?: true
    urlDefault?: true
    widthDefault?: true
    heightDefault?: true
    videoId?: true
  }

  export type ThumbnailsCountAggregateInputType = {
    id?: true
    urlDefault?: true
    widthDefault?: true
    heightDefault?: true
    videoId?: true
    _all?: true
  }

  export type ThumbnailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thumbnails to aggregate.
     */
    where?: thumbnailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thumbnails to fetch.
     */
    orderBy?: thumbnailsOrderByWithRelationInput | thumbnailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: thumbnailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned thumbnails
    **/
    _count?: true | ThumbnailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThumbnailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThumbnailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThumbnailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThumbnailsMaxAggregateInputType
  }

  export type GetThumbnailsAggregateType<T extends ThumbnailsAggregateArgs> = {
        [P in keyof T & keyof AggregateThumbnails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThumbnails[P]>
      : GetScalarType<T[P], AggregateThumbnails[P]>
  }




  export type thumbnailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: thumbnailsWhereInput
    orderBy?: thumbnailsOrderByWithAggregationInput | thumbnailsOrderByWithAggregationInput[]
    by: ThumbnailsScalarFieldEnum[] | ThumbnailsScalarFieldEnum
    having?: thumbnailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThumbnailsCountAggregateInputType | true
    _avg?: ThumbnailsAvgAggregateInputType
    _sum?: ThumbnailsSumAggregateInputType
    _min?: ThumbnailsMinAggregateInputType
    _max?: ThumbnailsMaxAggregateInputType
  }

  export type ThumbnailsGroupByOutputType = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
    videoId: string
    _count: ThumbnailsCountAggregateOutputType | null
    _avg: ThumbnailsAvgAggregateOutputType | null
    _sum: ThumbnailsSumAggregateOutputType | null
    _min: ThumbnailsMinAggregateOutputType | null
    _max: ThumbnailsMaxAggregateOutputType | null
  }

  type GetThumbnailsGroupByPayload<T extends thumbnailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThumbnailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThumbnailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThumbnailsGroupByOutputType[P]>
            : GetScalarType<T[P], ThumbnailsGroupByOutputType[P]>
        }
      >
    >


  export type thumbnailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    urlDefault?: boolean
    widthDefault?: boolean
    heightDefault?: boolean
    videoId?: boolean
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thumbnails"]>

  export type thumbnailsSelectScalar = {
    id?: boolean
    urlDefault?: boolean
    widthDefault?: boolean
    heightDefault?: boolean
    videoId?: boolean
  }

  export type thumbnailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    videos?: boolean | videosDefaultArgs<ExtArgs>
  }


  export type $thumbnailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "thumbnails"
    objects: {
      videos: Prisma.$videosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      urlDefault: string
      widthDefault: number
      heightDefault: number
      videoId: string
    }, ExtArgs["result"]["thumbnails"]>
    composites: {}
  }


  type thumbnailsGetPayload<S extends boolean | null | undefined | thumbnailsDefaultArgs> = $Result.GetResult<Prisma.$thumbnailsPayload, S>

  type thumbnailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<thumbnailsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ThumbnailsCountAggregateInputType | true
    }

  export interface thumbnailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['thumbnails'], meta: { name: 'thumbnails' } }
    /**
     * Find zero or one Thumbnails that matches the filter.
     * @param {thumbnailsFindUniqueArgs} args - Arguments to find a Thumbnails
     * @example
     * // Get one Thumbnails
     * const thumbnails = await prisma.thumbnails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends thumbnailsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsFindUniqueArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Thumbnails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {thumbnailsFindUniqueOrThrowArgs} args - Arguments to find a Thumbnails
     * @example
     * // Get one Thumbnails
     * const thumbnails = await prisma.thumbnails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends thumbnailsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Thumbnails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsFindFirstArgs} args - Arguments to find a Thumbnails
     * @example
     * // Get one Thumbnails
     * const thumbnails = await prisma.thumbnails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends thumbnailsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsFindFirstArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Thumbnails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsFindFirstOrThrowArgs} args - Arguments to find a Thumbnails
     * @example
     * // Get one Thumbnails
     * const thumbnails = await prisma.thumbnails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends thumbnailsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Thumbnails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thumbnails
     * const thumbnails = await prisma.thumbnails.findMany()
     * 
     * // Get first 10 Thumbnails
     * const thumbnails = await prisma.thumbnails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thumbnailsWithIdOnly = await prisma.thumbnails.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends thumbnailsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Thumbnails.
     * @param {thumbnailsCreateArgs} args - Arguments to create a Thumbnails.
     * @example
     * // Create one Thumbnails
     * const Thumbnails = await prisma.thumbnails.create({
     *   data: {
     *     // ... data to create a Thumbnails
     *   }
     * })
     * 
    **/
    create<T extends thumbnailsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsCreateArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Thumbnails.
     *     @param {thumbnailsCreateManyArgs} args - Arguments to create many Thumbnails.
     *     @example
     *     // Create many Thumbnails
     *     const thumbnails = await prisma.thumbnails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends thumbnailsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thumbnails.
     * @param {thumbnailsDeleteArgs} args - Arguments to delete one Thumbnails.
     * @example
     * // Delete one Thumbnails
     * const Thumbnails = await prisma.thumbnails.delete({
     *   where: {
     *     // ... filter to delete one Thumbnails
     *   }
     * })
     * 
    **/
    delete<T extends thumbnailsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsDeleteArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Thumbnails.
     * @param {thumbnailsUpdateArgs} args - Arguments to update one Thumbnails.
     * @example
     * // Update one Thumbnails
     * const thumbnails = await prisma.thumbnails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends thumbnailsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsUpdateArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Thumbnails.
     * @param {thumbnailsDeleteManyArgs} args - Arguments to filter Thumbnails to delete.
     * @example
     * // Delete a few Thumbnails
     * const { count } = await prisma.thumbnails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends thumbnailsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, thumbnailsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thumbnails
     * const thumbnails = await prisma.thumbnails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends thumbnailsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thumbnails.
     * @param {thumbnailsUpsertArgs} args - Arguments to update or create a Thumbnails.
     * @example
     * // Update or create a Thumbnails
     * const thumbnails = await prisma.thumbnails.upsert({
     *   create: {
     *     // ... data to create a Thumbnails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thumbnails we want to update
     *   }
     * })
    **/
    upsert<T extends thumbnailsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, thumbnailsUpsertArgs<ExtArgs>>
    ): Prisma__thumbnailsClient<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsCountArgs} args - Arguments to filter Thumbnails to count.
     * @example
     * // Count the number of Thumbnails
     * const count = await prisma.thumbnails.count({
     *   where: {
     *     // ... the filter for the Thumbnails we want to count
     *   }
     * })
    **/
    count<T extends thumbnailsCountArgs>(
      args?: Subset<T, thumbnailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThumbnailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThumbnailsAggregateArgs>(args: Subset<T, ThumbnailsAggregateArgs>): Prisma.PrismaPromise<GetThumbnailsAggregateType<T>>

    /**
     * Group by Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {thumbnailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends thumbnailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: thumbnailsGroupByArgs['orderBy'] }
        : { orderBy?: thumbnailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, thumbnailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThumbnailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the thumbnails model
   */
  readonly fields: thumbnailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for thumbnails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__thumbnailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    videos<T extends videosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, videosDefaultArgs<ExtArgs>>): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the thumbnails model
   */ 
  interface thumbnailsFieldRefs {
    readonly id: FieldRef<"thumbnails", 'String'>
    readonly urlDefault: FieldRef<"thumbnails", 'String'>
    readonly widthDefault: FieldRef<"thumbnails", 'Int'>
    readonly heightDefault: FieldRef<"thumbnails", 'Int'>
    readonly videoId: FieldRef<"thumbnails", 'String'>
  }
    

  // Custom InputTypes

  /**
   * thumbnails findUnique
   */
  export type thumbnailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter, which thumbnails to fetch.
     */
    where: thumbnailsWhereUniqueInput
  }


  /**
   * thumbnails findUniqueOrThrow
   */
  export type thumbnailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter, which thumbnails to fetch.
     */
    where: thumbnailsWhereUniqueInput
  }


  /**
   * thumbnails findFirst
   */
  export type thumbnailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter, which thumbnails to fetch.
     */
    where?: thumbnailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thumbnails to fetch.
     */
    orderBy?: thumbnailsOrderByWithRelationInput | thumbnailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thumbnails.
     */
    cursor?: thumbnailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thumbnails.
     */
    distinct?: ThumbnailsScalarFieldEnum | ThumbnailsScalarFieldEnum[]
  }


  /**
   * thumbnails findFirstOrThrow
   */
  export type thumbnailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter, which thumbnails to fetch.
     */
    where?: thumbnailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thumbnails to fetch.
     */
    orderBy?: thumbnailsOrderByWithRelationInput | thumbnailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for thumbnails.
     */
    cursor?: thumbnailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of thumbnails.
     */
    distinct?: ThumbnailsScalarFieldEnum | ThumbnailsScalarFieldEnum[]
  }


  /**
   * thumbnails findMany
   */
  export type thumbnailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter, which thumbnails to fetch.
     */
    where?: thumbnailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of thumbnails to fetch.
     */
    orderBy?: thumbnailsOrderByWithRelationInput | thumbnailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing thumbnails.
     */
    cursor?: thumbnailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` thumbnails.
     */
    skip?: number
    distinct?: ThumbnailsScalarFieldEnum | ThumbnailsScalarFieldEnum[]
  }


  /**
   * thumbnails create
   */
  export type thumbnailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * The data needed to create a thumbnails.
     */
    data: XOR<thumbnailsCreateInput, thumbnailsUncheckedCreateInput>
  }


  /**
   * thumbnails createMany
   */
  export type thumbnailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many thumbnails.
     */
    data: thumbnailsCreateManyInput | thumbnailsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * thumbnails update
   */
  export type thumbnailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * The data needed to update a thumbnails.
     */
    data: XOR<thumbnailsUpdateInput, thumbnailsUncheckedUpdateInput>
    /**
     * Choose, which thumbnails to update.
     */
    where: thumbnailsWhereUniqueInput
  }


  /**
   * thumbnails updateMany
   */
  export type thumbnailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update thumbnails.
     */
    data: XOR<thumbnailsUpdateManyMutationInput, thumbnailsUncheckedUpdateManyInput>
    /**
     * Filter which thumbnails to update
     */
    where?: thumbnailsWhereInput
  }


  /**
   * thumbnails upsert
   */
  export type thumbnailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * The filter to search for the thumbnails to update in case it exists.
     */
    where: thumbnailsWhereUniqueInput
    /**
     * In case the thumbnails found by the `where` argument doesn't exist, create a new thumbnails with this data.
     */
    create: XOR<thumbnailsCreateInput, thumbnailsUncheckedCreateInput>
    /**
     * In case the thumbnails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<thumbnailsUpdateInput, thumbnailsUncheckedUpdateInput>
  }


  /**
   * thumbnails delete
   */
  export type thumbnailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    /**
     * Filter which thumbnails to delete.
     */
    where: thumbnailsWhereUniqueInput
  }


  /**
   * thumbnails deleteMany
   */
  export type thumbnailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which thumbnails to delete
     */
    where?: thumbnailsWhereInput
  }


  /**
   * thumbnails without action
   */
  export type thumbnailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
  }



  /**
   * Model videos
   */

  export type AggregateVideos = {
    _count: VideosCountAggregateOutputType | null
    _avg: VideosAvgAggregateOutputType | null
    _sum: VideosSumAggregateOutputType | null
    _min: VideosMinAggregateOutputType | null
    _max: VideosMaxAggregateOutputType | null
  }

  export type VideosAvgAggregateOutputType = {
    duration: number | null
    viewCount: number | null
    likeCount: number | null
    favoriteCount: number | null
    commentCount: number | null
  }

  export type VideosSumAggregateOutputType = {
    duration: number | null
    viewCount: number | null
    likeCount: number | null
    favoriteCount: number | null
    commentCount: number | null
  }

  export type VideosMinAggregateOutputType = {
    id: string | null
    publishedAt: Date | null
    channelId: string | null
    title: string | null
    description: string | null
    duration: number | null
    dimension: string | null
    caption: boolean | null
    licensedContent: boolean | null
    projection: string | null
    viewCount: number | null
    likeCount: number | null
    favoriteCount: number | null
    commentCount: number | null
    shortId: string | null
  }

  export type VideosMaxAggregateOutputType = {
    id: string | null
    publishedAt: Date | null
    channelId: string | null
    title: string | null
    description: string | null
    duration: number | null
    dimension: string | null
    caption: boolean | null
    licensedContent: boolean | null
    projection: string | null
    viewCount: number | null
    likeCount: number | null
    favoriteCount: number | null
    commentCount: number | null
    shortId: string | null
  }

  export type VideosCountAggregateOutputType = {
    id: number
    publishedAt: number
    channelId: number
    title: number
    description: number
    duration: number
    dimension: number
    caption: number
    licensedContent: number
    projection: number
    viewCount: number
    likeCount: number
    favoriteCount: number
    commentCount: number
    shortId: number
    _all: number
  }


  export type VideosAvgAggregateInputType = {
    duration?: true
    viewCount?: true
    likeCount?: true
    favoriteCount?: true
    commentCount?: true
  }

  export type VideosSumAggregateInputType = {
    duration?: true
    viewCount?: true
    likeCount?: true
    favoriteCount?: true
    commentCount?: true
  }

  export type VideosMinAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    duration?: true
    dimension?: true
    caption?: true
    licensedContent?: true
    projection?: true
    viewCount?: true
    likeCount?: true
    favoriteCount?: true
    commentCount?: true
    shortId?: true
  }

  export type VideosMaxAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    duration?: true
    dimension?: true
    caption?: true
    licensedContent?: true
    projection?: true
    viewCount?: true
    likeCount?: true
    favoriteCount?: true
    commentCount?: true
    shortId?: true
  }

  export type VideosCountAggregateInputType = {
    id?: true
    publishedAt?: true
    channelId?: true
    title?: true
    description?: true
    duration?: true
    dimension?: true
    caption?: true
    licensedContent?: true
    projection?: true
    viewCount?: true
    likeCount?: true
    favoriteCount?: true
    commentCount?: true
    shortId?: true
    _all?: true
  }

  export type VideosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videos to aggregate.
     */
    where?: videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videos to fetch.
     */
    orderBy?: videosOrderByWithRelationInput | videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned videos
    **/
    _count?: true | VideosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideosMaxAggregateInputType
  }

  export type GetVideosAggregateType<T extends VideosAggregateArgs> = {
        [P in keyof T & keyof AggregateVideos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideos[P]>
      : GetScalarType<T[P], AggregateVideos[P]>
  }




  export type videosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: videosWhereInput
    orderBy?: videosOrderByWithAggregationInput | videosOrderByWithAggregationInput[]
    by: VideosScalarFieldEnum[] | VideosScalarFieldEnum
    having?: videosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideosCountAggregateInputType | true
    _avg?: VideosAvgAggregateInputType
    _sum?: VideosSumAggregateInputType
    _min?: VideosMinAggregateInputType
    _max?: VideosMaxAggregateInputType
  }

  export type VideosGroupByOutputType = {
    id: string
    publishedAt: Date
    channelId: string
    title: string
    description: string
    duration: number | null
    dimension: string | null
    caption: boolean | null
    licensedContent: boolean | null
    projection: string | null
    viewCount: number | null
    likeCount: number | null
    favoriteCount: number | null
    commentCount: number | null
    shortId: string | null
    _count: VideosCountAggregateOutputType | null
    _avg: VideosAvgAggregateOutputType | null
    _sum: VideosSumAggregateOutputType | null
    _min: VideosMinAggregateOutputType | null
    _max: VideosMaxAggregateOutputType | null
  }

  type GetVideosGroupByPayload<T extends videosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideosGroupByOutputType[P]>
            : GetScalarType<T[P], VideosGroupByOutputType[P]>
        }
      >
    >


  export type videosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publishedAt?: boolean
    channelId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    dimension?: boolean
    caption?: boolean
    licensedContent?: boolean
    projection?: boolean
    viewCount?: boolean
    likeCount?: boolean
    favoriteCount?: boolean
    commentCount?: boolean
    shortId?: boolean
    playlist_videos?: boolean | videos$playlist_videosArgs<ExtArgs>
    tags?: boolean | videos$tagsArgs<ExtArgs>
    thumbnails?: boolean | videos$thumbnailsArgs<ExtArgs>
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    _count?: boolean | VideosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videos"]>

  export type videosSelectScalar = {
    id?: boolean
    publishedAt?: boolean
    channelId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    dimension?: boolean
    caption?: boolean
    licensedContent?: boolean
    projection?: boolean
    viewCount?: boolean
    likeCount?: boolean
    favoriteCount?: boolean
    commentCount?: boolean
    shortId?: boolean
  }

  export type videosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist_videos?: boolean | videos$playlist_videosArgs<ExtArgs>
    tags?: boolean | videos$tagsArgs<ExtArgs>
    thumbnails?: boolean | videos$thumbnailsArgs<ExtArgs>
    channels?: boolean | channelsDefaultArgs<ExtArgs>
    _count?: boolean | VideosCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $videosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "videos"
    objects: {
      playlist_videos: Prisma.$playlist_videosPayload<ExtArgs>[]
      tags: Prisma.$tagsPayload<ExtArgs>[]
      thumbnails: Prisma.$thumbnailsPayload<ExtArgs>[]
      channels: Prisma.$channelsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publishedAt: Date
      channelId: string
      title: string
      description: string
      duration: number | null
      dimension: string | null
      caption: boolean | null
      licensedContent: boolean | null
      projection: string | null
      viewCount: number | null
      likeCount: number | null
      favoriteCount: number | null
      commentCount: number | null
      shortId: string | null
    }, ExtArgs["result"]["videos"]>
    composites: {}
  }


  type videosGetPayload<S extends boolean | null | undefined | videosDefaultArgs> = $Result.GetResult<Prisma.$videosPayload, S>

  type videosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<videosFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: VideosCountAggregateInputType | true
    }

  export interface videosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['videos'], meta: { name: 'videos' } }
    /**
     * Find zero or one Videos that matches the filter.
     * @param {videosFindUniqueArgs} args - Arguments to find a Videos
     * @example
     * // Get one Videos
     * const videos = await prisma.videos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends videosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, videosFindUniqueArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Videos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {videosFindUniqueOrThrowArgs} args - Arguments to find a Videos
     * @example
     * // Get one Videos
     * const videos = await prisma.videos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends videosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosFindFirstArgs} args - Arguments to find a Videos
     * @example
     * // Get one Videos
     * const videos = await prisma.videos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends videosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, videosFindFirstArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Videos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosFindFirstOrThrowArgs} args - Arguments to find a Videos
     * @example
     * // Get one Videos
     * const videos = await prisma.videos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends videosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, videosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.videos.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.videos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videosWithIdOnly = await prisma.videos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends videosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Videos.
     * @param {videosCreateArgs} args - Arguments to create a Videos.
     * @example
     * // Create one Videos
     * const Videos = await prisma.videos.create({
     *   data: {
     *     // ... data to create a Videos
     *   }
     * })
     * 
    **/
    create<T extends videosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, videosCreateArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Videos.
     *     @param {videosCreateManyArgs} args - Arguments to create many Videos.
     *     @example
     *     // Create many Videos
     *     const videos = await prisma.videos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends videosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Videos.
     * @param {videosDeleteArgs} args - Arguments to delete one Videos.
     * @example
     * // Delete one Videos
     * const Videos = await prisma.videos.delete({
     *   where: {
     *     // ... filter to delete one Videos
     *   }
     * })
     * 
    **/
    delete<T extends videosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, videosDeleteArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Videos.
     * @param {videosUpdateArgs} args - Arguments to update one Videos.
     * @example
     * // Update one Videos
     * const videos = await prisma.videos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends videosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, videosUpdateArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Videos.
     * @param {videosDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.videos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends videosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, videosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const videos = await prisma.videos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends videosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, videosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Videos.
     * @param {videosUpsertArgs} args - Arguments to update or create a Videos.
     * @example
     * // Update or create a Videos
     * const videos = await prisma.videos.upsert({
     *   create: {
     *     // ... data to create a Videos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Videos we want to update
     *   }
     * })
    **/
    upsert<T extends videosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, videosUpsertArgs<ExtArgs>>
    ): Prisma__videosClient<$Result.GetResult<Prisma.$videosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.videos.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends videosCountArgs>(
      args?: Subset<T, videosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideosAggregateArgs>(args: Subset<T, VideosAggregateArgs>): Prisma.PrismaPromise<GetVideosAggregateType<T>>

    /**
     * Group by Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {videosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends videosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: videosGroupByArgs['orderBy'] }
        : { orderBy?: videosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, videosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the videos model
   */
  readonly fields: videosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for videos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__videosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlist_videos<T extends videos$playlist_videosArgs<ExtArgs> = {}>(args?: Subset<T, videos$playlist_videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$playlist_videosPayload<ExtArgs>, T, 'findMany'> | Null>;

    tags<T extends videos$tagsArgs<ExtArgs> = {}>(args?: Subset<T, videos$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findMany'> | Null>;

    thumbnails<T extends videos$thumbnailsArgs<ExtArgs> = {}>(args?: Subset<T, videos$thumbnailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$thumbnailsPayload<ExtArgs>, T, 'findMany'> | Null>;

    channels<T extends channelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, channelsDefaultArgs<ExtArgs>>): Prisma__channelsClient<$Result.GetResult<Prisma.$channelsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the videos model
   */ 
  interface videosFieldRefs {
    readonly id: FieldRef<"videos", 'String'>
    readonly publishedAt: FieldRef<"videos", 'DateTime'>
    readonly channelId: FieldRef<"videos", 'String'>
    readonly title: FieldRef<"videos", 'String'>
    readonly description: FieldRef<"videos", 'String'>
    readonly duration: FieldRef<"videos", 'Int'>
    readonly dimension: FieldRef<"videos", 'String'>
    readonly caption: FieldRef<"videos", 'Boolean'>
    readonly licensedContent: FieldRef<"videos", 'Boolean'>
    readonly projection: FieldRef<"videos", 'String'>
    readonly viewCount: FieldRef<"videos", 'Int'>
    readonly likeCount: FieldRef<"videos", 'Int'>
    readonly favoriteCount: FieldRef<"videos", 'Int'>
    readonly commentCount: FieldRef<"videos", 'Int'>
    readonly shortId: FieldRef<"videos", 'String'>
  }
    

  // Custom InputTypes

  /**
   * videos findUnique
   */
  export type videosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter, which videos to fetch.
     */
    where: videosWhereUniqueInput
  }


  /**
   * videos findUniqueOrThrow
   */
  export type videosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter, which videos to fetch.
     */
    where: videosWhereUniqueInput
  }


  /**
   * videos findFirst
   */
  export type videosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter, which videos to fetch.
     */
    where?: videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videos to fetch.
     */
    orderBy?: videosOrderByWithRelationInput | videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videos.
     */
    cursor?: videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videos.
     */
    distinct?: VideosScalarFieldEnum | VideosScalarFieldEnum[]
  }


  /**
   * videos findFirstOrThrow
   */
  export type videosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter, which videos to fetch.
     */
    where?: videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videos to fetch.
     */
    orderBy?: videosOrderByWithRelationInput | videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for videos.
     */
    cursor?: videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of videos.
     */
    distinct?: VideosScalarFieldEnum | VideosScalarFieldEnum[]
  }


  /**
   * videos findMany
   */
  export type videosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter, which videos to fetch.
     */
    where?: videosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of videos to fetch.
     */
    orderBy?: videosOrderByWithRelationInput | videosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing videos.
     */
    cursor?: videosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` videos.
     */
    skip?: number
    distinct?: VideosScalarFieldEnum | VideosScalarFieldEnum[]
  }


  /**
   * videos create
   */
  export type videosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * The data needed to create a videos.
     */
    data: XOR<videosCreateInput, videosUncheckedCreateInput>
  }


  /**
   * videos createMany
   */
  export type videosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many videos.
     */
    data: videosCreateManyInput | videosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * videos update
   */
  export type videosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * The data needed to update a videos.
     */
    data: XOR<videosUpdateInput, videosUncheckedUpdateInput>
    /**
     * Choose, which videos to update.
     */
    where: videosWhereUniqueInput
  }


  /**
   * videos updateMany
   */
  export type videosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update videos.
     */
    data: XOR<videosUpdateManyMutationInput, videosUncheckedUpdateManyInput>
    /**
     * Filter which videos to update
     */
    where?: videosWhereInput
  }


  /**
   * videos upsert
   */
  export type videosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * The filter to search for the videos to update in case it exists.
     */
    where: videosWhereUniqueInput
    /**
     * In case the videos found by the `where` argument doesn't exist, create a new videos with this data.
     */
    create: XOR<videosCreateInput, videosUncheckedCreateInput>
    /**
     * In case the videos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<videosUpdateInput, videosUncheckedUpdateInput>
  }


  /**
   * videos delete
   */
  export type videosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
    /**
     * Filter which videos to delete.
     */
    where: videosWhereUniqueInput
  }


  /**
   * videos deleteMany
   */
  export type videosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which videos to delete
     */
    where?: videosWhereInput
  }


  /**
   * videos.playlist_videos
   */
  export type videos$playlist_videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the playlist_videos
     */
    select?: playlist_videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: playlist_videosInclude<ExtArgs> | null
    where?: playlist_videosWhereInput
    orderBy?: playlist_videosOrderByWithRelationInput | playlist_videosOrderByWithRelationInput[]
    cursor?: playlist_videosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Playlist_videosScalarFieldEnum | Playlist_videosScalarFieldEnum[]
  }


  /**
   * videos.tags
   */
  export type videos$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tagsInclude<ExtArgs> | null
    where?: tagsWhereInput
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    cursor?: tagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * videos.thumbnails
   */
  export type videos$thumbnailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the thumbnails
     */
    select?: thumbnailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: thumbnailsInclude<ExtArgs> | null
    where?: thumbnailsWhereInput
    orderBy?: thumbnailsOrderByWithRelationInput | thumbnailsOrderByWithRelationInput[]
    cursor?: thumbnailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThumbnailsScalarFieldEnum | ThumbnailsScalarFieldEnum[]
  }


  /**
   * videos without action
   */
  export type videosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the videos
     */
    select?: videosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: videosInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BrandingsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    keywords: 'keywords'
  };

  export type BrandingsScalarFieldEnum = (typeof BrandingsScalarFieldEnum)[keyof typeof BrandingsScalarFieldEnum]


  export const ChannelsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    customUrl: 'customUrl',
    publishedAt: 'publishedAt',
    viewCount: 'viewCount',
    subscriberCount: 'subscriberCount'
  };

  export type ChannelsScalarFieldEnum = (typeof ChannelsScalarFieldEnum)[keyof typeof ChannelsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    channelId: 'channelId',
    videoId: 'videoId',
    topLevelCommentId: 'topLevelCommentId',
    textDisplay: 'textDisplay',
    textOriginal: 'textOriginal',
    authorNameDisplay: 'authorNameDisplay',
    authorProfileImageUrl: 'authorProfileImageUrl',
    authorChannelUrl: 'authorChannelUrl',
    canRate: 'canRate',
    viewerRating: 'viewerRating',
    likeCount: 'likeCount',
    publishedAt: 'publishedAt',
    updatedAt: 'updatedAt'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const Playlist_videosScalarFieldEnum: {
    videoId: 'videoId',
    playlistId: 'playlistId'
  };

  export type Playlist_videosScalarFieldEnum = (typeof Playlist_videosScalarFieldEnum)[keyof typeof Playlist_videosScalarFieldEnum]


  export const PlaylistsScalarFieldEnum: {
    id: 'id',
    publishedAt: 'publishedAt',
    channelId: 'channelId',
    title: 'title',
    description: 'description',
    defaultLanguage: 'defaultLanguage'
  };

  export type PlaylistsScalarFieldEnum = (typeof PlaylistsScalarFieldEnum)[keyof typeof PlaylistsScalarFieldEnum]


  export const TagsScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    text: 'text'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const ThumbnailsScalarFieldEnum: {
    id: 'id',
    urlDefault: 'urlDefault',
    widthDefault: 'widthDefault',
    heightDefault: 'heightDefault',
    videoId: 'videoId'
  };

  export type ThumbnailsScalarFieldEnum = (typeof ThumbnailsScalarFieldEnum)[keyof typeof ThumbnailsScalarFieldEnum]


  export const VideosScalarFieldEnum: {
    id: 'id',
    publishedAt: 'publishedAt',
    channelId: 'channelId',
    title: 'title',
    description: 'description',
    duration: 'duration',
    dimension: 'dimension',
    caption: 'caption',
    licensedContent: 'licensedContent',
    projection: 'projection',
    viewCount: 'viewCount',
    likeCount: 'likeCount',
    favoriteCount: 'favoriteCount',
    commentCount: 'commentCount',
    shortId: 'shortId'
  };

  export type VideosScalarFieldEnum = (typeof VideosScalarFieldEnum)[keyof typeof VideosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type brandingsWhereInput = {
    AND?: brandingsWhereInput | brandingsWhereInput[]
    OR?: brandingsWhereInput[]
    NOT?: brandingsWhereInput | brandingsWhereInput[]
    id?: StringFilter<"brandings"> | string
    title?: StringFilter<"brandings"> | string
    description?: StringFilter<"brandings"> | string
    keywords?: StringNullableListFilter<"brandings">
  }

  export type brandingsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
  }

  export type brandingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: brandingsWhereInput | brandingsWhereInput[]
    OR?: brandingsWhereInput[]
    NOT?: brandingsWhereInput | brandingsWhereInput[]
    title?: StringFilter<"brandings"> | string
    description?: StringFilter<"brandings"> | string
    keywords?: StringNullableListFilter<"brandings">
  }, "id">

  export type brandingsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    _count?: brandingsCountOrderByAggregateInput
    _max?: brandingsMaxOrderByAggregateInput
    _min?: brandingsMinOrderByAggregateInput
  }

  export type brandingsScalarWhereWithAggregatesInput = {
    AND?: brandingsScalarWhereWithAggregatesInput | brandingsScalarWhereWithAggregatesInput[]
    OR?: brandingsScalarWhereWithAggregatesInput[]
    NOT?: brandingsScalarWhereWithAggregatesInput | brandingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"brandings"> | string
    title?: StringWithAggregatesFilter<"brandings"> | string
    description?: StringWithAggregatesFilter<"brandings"> | string
    keywords?: StringNullableListFilter<"brandings">
  }

  export type channelsWhereInput = {
    AND?: channelsWhereInput | channelsWhereInput[]
    OR?: channelsWhereInput[]
    NOT?: channelsWhereInput | channelsWhereInput[]
    id?: StringFilter<"channels"> | string
    title?: StringFilter<"channels"> | string
    description?: StringFilter<"channels"> | string
    customUrl?: StringFilter<"channels"> | string
    publishedAt?: DateTimeFilter<"channels"> | Date | string
    viewCount?: BigIntFilter<"channels"> | bigint | number
    subscriberCount?: BigIntFilter<"channels"> | bigint | number
    playlists?: PlaylistsListRelationFilter
    videos?: VideosListRelationFilter
  }

  export type channelsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customUrl?: SortOrder
    publishedAt?: SortOrder
    viewCount?: SortOrder
    subscriberCount?: SortOrder
    playlists?: playlistsOrderByRelationAggregateInput
    videos?: videosOrderByRelationAggregateInput
  }

  export type channelsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: channelsWhereInput | channelsWhereInput[]
    OR?: channelsWhereInput[]
    NOT?: channelsWhereInput | channelsWhereInput[]
    title?: StringFilter<"channels"> | string
    description?: StringFilter<"channels"> | string
    customUrl?: StringFilter<"channels"> | string
    publishedAt?: DateTimeFilter<"channels"> | Date | string
    viewCount?: BigIntFilter<"channels"> | bigint | number
    subscriberCount?: BigIntFilter<"channels"> | bigint | number
    playlists?: PlaylistsListRelationFilter
    videos?: VideosListRelationFilter
  }, "id">

  export type channelsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customUrl?: SortOrder
    publishedAt?: SortOrder
    viewCount?: SortOrder
    subscriberCount?: SortOrder
    _count?: channelsCountOrderByAggregateInput
    _avg?: channelsAvgOrderByAggregateInput
    _max?: channelsMaxOrderByAggregateInput
    _min?: channelsMinOrderByAggregateInput
    _sum?: channelsSumOrderByAggregateInput
  }

  export type channelsScalarWhereWithAggregatesInput = {
    AND?: channelsScalarWhereWithAggregatesInput | channelsScalarWhereWithAggregatesInput[]
    OR?: channelsScalarWhereWithAggregatesInput[]
    NOT?: channelsScalarWhereWithAggregatesInput | channelsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"channels"> | string
    title?: StringWithAggregatesFilter<"channels"> | string
    description?: StringWithAggregatesFilter<"channels"> | string
    customUrl?: StringWithAggregatesFilter<"channels"> | string
    publishedAt?: DateTimeWithAggregatesFilter<"channels"> | Date | string
    viewCount?: BigIntWithAggregatesFilter<"channels"> | bigint | number
    subscriberCount?: BigIntWithAggregatesFilter<"channels"> | bigint | number
  }

  export type commentsWhereInput = {
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    id?: StringFilter<"comments"> | string
    channelId?: StringFilter<"comments"> | string
    videoId?: StringFilter<"comments"> | string
    topLevelCommentId?: StringNullableFilter<"comments"> | string | null
    textDisplay?: StringFilter<"comments"> | string
    textOriginal?: StringFilter<"comments"> | string
    authorNameDisplay?: StringFilter<"comments"> | string
    authorProfileImageUrl?: StringFilter<"comments"> | string
    authorChannelUrl?: StringFilter<"comments"> | string
    canRate?: BoolFilter<"comments"> | boolean
    viewerRating?: IntFilter<"comments"> | number
    likeCount?: IntFilter<"comments"> | number
    publishedAt?: DateTimeFilter<"comments"> | Date | string
    updatedAt?: DateTimeFilter<"comments"> | Date | string
  }

  export type commentsOrderByWithRelationInput = {
    id?: SortOrder
    channelId?: SortOrder
    videoId?: SortOrder
    topLevelCommentId?: SortOrderInput | SortOrder
    textDisplay?: SortOrder
    textOriginal?: SortOrder
    authorNameDisplay?: SortOrder
    authorProfileImageUrl?: SortOrder
    authorChannelUrl?: SortOrder
    canRate?: SortOrder
    viewerRating?: SortOrder
    likeCount?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type commentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: commentsWhereInput | commentsWhereInput[]
    OR?: commentsWhereInput[]
    NOT?: commentsWhereInput | commentsWhereInput[]
    channelId?: StringFilter<"comments"> | string
    videoId?: StringFilter<"comments"> | string
    topLevelCommentId?: StringNullableFilter<"comments"> | string | null
    textDisplay?: StringFilter<"comments"> | string
    textOriginal?: StringFilter<"comments"> | string
    authorNameDisplay?: StringFilter<"comments"> | string
    authorProfileImageUrl?: StringFilter<"comments"> | string
    authorChannelUrl?: StringFilter<"comments"> | string
    canRate?: BoolFilter<"comments"> | boolean
    viewerRating?: IntFilter<"comments"> | number
    likeCount?: IntFilter<"comments"> | number
    publishedAt?: DateTimeFilter<"comments"> | Date | string
    updatedAt?: DateTimeFilter<"comments"> | Date | string
  }, "id">

  export type commentsOrderByWithAggregationInput = {
    id?: SortOrder
    channelId?: SortOrder
    videoId?: SortOrder
    topLevelCommentId?: SortOrderInput | SortOrder
    textDisplay?: SortOrder
    textOriginal?: SortOrder
    authorNameDisplay?: SortOrder
    authorProfileImageUrl?: SortOrder
    authorChannelUrl?: SortOrder
    canRate?: SortOrder
    viewerRating?: SortOrder
    likeCount?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: commentsCountOrderByAggregateInput
    _avg?: commentsAvgOrderByAggregateInput
    _max?: commentsMaxOrderByAggregateInput
    _min?: commentsMinOrderByAggregateInput
    _sum?: commentsSumOrderByAggregateInput
  }

  export type commentsScalarWhereWithAggregatesInput = {
    AND?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    OR?: commentsScalarWhereWithAggregatesInput[]
    NOT?: commentsScalarWhereWithAggregatesInput | commentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"comments"> | string
    channelId?: StringWithAggregatesFilter<"comments"> | string
    videoId?: StringWithAggregatesFilter<"comments"> | string
    topLevelCommentId?: StringNullableWithAggregatesFilter<"comments"> | string | null
    textDisplay?: StringWithAggregatesFilter<"comments"> | string
    textOriginal?: StringWithAggregatesFilter<"comments"> | string
    authorNameDisplay?: StringWithAggregatesFilter<"comments"> | string
    authorProfileImageUrl?: StringWithAggregatesFilter<"comments"> | string
    authorChannelUrl?: StringWithAggregatesFilter<"comments"> | string
    canRate?: BoolWithAggregatesFilter<"comments"> | boolean
    viewerRating?: IntWithAggregatesFilter<"comments"> | number
    likeCount?: IntWithAggregatesFilter<"comments"> | number
    publishedAt?: DateTimeWithAggregatesFilter<"comments"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"comments"> | Date | string
  }

  export type playlist_videosWhereInput = {
    AND?: playlist_videosWhereInput | playlist_videosWhereInput[]
    OR?: playlist_videosWhereInput[]
    NOT?: playlist_videosWhereInput | playlist_videosWhereInput[]
    videoId?: StringFilter<"playlist_videos"> | string
    playlistId?: StringFilter<"playlist_videos"> | string
    playlists?: XOR<PlaylistsRelationFilter, playlistsWhereInput>
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }

  export type playlist_videosOrderByWithRelationInput = {
    videoId?: SortOrder
    playlistId?: SortOrder
    playlists?: playlistsOrderByWithRelationInput
    videos?: videosOrderByWithRelationInput
  }

  export type playlist_videosWhereUniqueInput = Prisma.AtLeast<{
    videoId_playlistId?: playlist_videosVideoIdPlaylistIdCompoundUniqueInput
    AND?: playlist_videosWhereInput | playlist_videosWhereInput[]
    OR?: playlist_videosWhereInput[]
    NOT?: playlist_videosWhereInput | playlist_videosWhereInput[]
    videoId?: StringFilter<"playlist_videos"> | string
    playlistId?: StringFilter<"playlist_videos"> | string
    playlists?: XOR<PlaylistsRelationFilter, playlistsWhereInput>
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }, "videoId_playlistId">

  export type playlist_videosOrderByWithAggregationInput = {
    videoId?: SortOrder
    playlistId?: SortOrder
    _count?: playlist_videosCountOrderByAggregateInput
    _max?: playlist_videosMaxOrderByAggregateInput
    _min?: playlist_videosMinOrderByAggregateInput
  }

  export type playlist_videosScalarWhereWithAggregatesInput = {
    AND?: playlist_videosScalarWhereWithAggregatesInput | playlist_videosScalarWhereWithAggregatesInput[]
    OR?: playlist_videosScalarWhereWithAggregatesInput[]
    NOT?: playlist_videosScalarWhereWithAggregatesInput | playlist_videosScalarWhereWithAggregatesInput[]
    videoId?: StringWithAggregatesFilter<"playlist_videos"> | string
    playlistId?: StringWithAggregatesFilter<"playlist_videos"> | string
  }

  export type playlistsWhereInput = {
    AND?: playlistsWhereInput | playlistsWhereInput[]
    OR?: playlistsWhereInput[]
    NOT?: playlistsWhereInput | playlistsWhereInput[]
    id?: StringFilter<"playlists"> | string
    publishedAt?: DateTimeFilter<"playlists"> | Date | string
    channelId?: StringFilter<"playlists"> | string
    title?: StringFilter<"playlists"> | string
    description?: StringFilter<"playlists"> | string
    defaultLanguage?: StringNullableFilter<"playlists"> | string | null
    playlist_videos?: Playlist_videosListRelationFilter
    channels?: XOR<ChannelsRelationFilter, channelsWhereInput>
  }

  export type playlistsOrderByWithRelationInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    defaultLanguage?: SortOrderInput | SortOrder
    playlist_videos?: playlist_videosOrderByRelationAggregateInput
    channels?: channelsOrderByWithRelationInput
  }

  export type playlistsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: playlistsWhereInput | playlistsWhereInput[]
    OR?: playlistsWhereInput[]
    NOT?: playlistsWhereInput | playlistsWhereInput[]
    publishedAt?: DateTimeFilter<"playlists"> | Date | string
    channelId?: StringFilter<"playlists"> | string
    title?: StringFilter<"playlists"> | string
    description?: StringFilter<"playlists"> | string
    defaultLanguage?: StringNullableFilter<"playlists"> | string | null
    playlist_videos?: Playlist_videosListRelationFilter
    channels?: XOR<ChannelsRelationFilter, channelsWhereInput>
  }, "id">

  export type playlistsOrderByWithAggregationInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    defaultLanguage?: SortOrderInput | SortOrder
    _count?: playlistsCountOrderByAggregateInput
    _max?: playlistsMaxOrderByAggregateInput
    _min?: playlistsMinOrderByAggregateInput
  }

  export type playlistsScalarWhereWithAggregatesInput = {
    AND?: playlistsScalarWhereWithAggregatesInput | playlistsScalarWhereWithAggregatesInput[]
    OR?: playlistsScalarWhereWithAggregatesInput[]
    NOT?: playlistsScalarWhereWithAggregatesInput | playlistsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"playlists"> | string
    publishedAt?: DateTimeWithAggregatesFilter<"playlists"> | Date | string
    channelId?: StringWithAggregatesFilter<"playlists"> | string
    title?: StringWithAggregatesFilter<"playlists"> | string
    description?: StringWithAggregatesFilter<"playlists"> | string
    defaultLanguage?: StringNullableWithAggregatesFilter<"playlists"> | string | null
  }

  export type tagsWhereInput = {
    AND?: tagsWhereInput | tagsWhereInput[]
    OR?: tagsWhereInput[]
    NOT?: tagsWhereInput | tagsWhereInput[]
    id?: StringFilter<"tags"> | string
    videoId?: StringFilter<"tags"> | string
    text?: StringFilter<"tags"> | string
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }

  export type tagsOrderByWithRelationInput = {
    id?: SortOrder
    videoId?: SortOrder
    text?: SortOrder
    videos?: videosOrderByWithRelationInput
  }

  export type tagsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: tagsWhereInput | tagsWhereInput[]
    OR?: tagsWhereInput[]
    NOT?: tagsWhereInput | tagsWhereInput[]
    videoId?: StringFilter<"tags"> | string
    text?: StringFilter<"tags"> | string
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }, "id">

  export type tagsOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    text?: SortOrder
    _count?: tagsCountOrderByAggregateInput
    _max?: tagsMaxOrderByAggregateInput
    _min?: tagsMinOrderByAggregateInput
  }

  export type tagsScalarWhereWithAggregatesInput = {
    AND?: tagsScalarWhereWithAggregatesInput | tagsScalarWhereWithAggregatesInput[]
    OR?: tagsScalarWhereWithAggregatesInput[]
    NOT?: tagsScalarWhereWithAggregatesInput | tagsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"tags"> | string
    videoId?: StringWithAggregatesFilter<"tags"> | string
    text?: StringWithAggregatesFilter<"tags"> | string
  }

  export type thumbnailsWhereInput = {
    AND?: thumbnailsWhereInput | thumbnailsWhereInput[]
    OR?: thumbnailsWhereInput[]
    NOT?: thumbnailsWhereInput | thumbnailsWhereInput[]
    id?: StringFilter<"thumbnails"> | string
    urlDefault?: StringFilter<"thumbnails"> | string
    widthDefault?: IntFilter<"thumbnails"> | number
    heightDefault?: IntFilter<"thumbnails"> | number
    videoId?: StringFilter<"thumbnails"> | string
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }

  export type thumbnailsOrderByWithRelationInput = {
    id?: SortOrder
    urlDefault?: SortOrder
    widthDefault?: SortOrder
    heightDefault?: SortOrder
    videoId?: SortOrder
    videos?: videosOrderByWithRelationInput
  }

  export type thumbnailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: thumbnailsWhereInput | thumbnailsWhereInput[]
    OR?: thumbnailsWhereInput[]
    NOT?: thumbnailsWhereInput | thumbnailsWhereInput[]
    urlDefault?: StringFilter<"thumbnails"> | string
    widthDefault?: IntFilter<"thumbnails"> | number
    heightDefault?: IntFilter<"thumbnails"> | number
    videoId?: StringFilter<"thumbnails"> | string
    videos?: XOR<VideosRelationFilter, videosWhereInput>
  }, "id">

  export type thumbnailsOrderByWithAggregationInput = {
    id?: SortOrder
    urlDefault?: SortOrder
    widthDefault?: SortOrder
    heightDefault?: SortOrder
    videoId?: SortOrder
    _count?: thumbnailsCountOrderByAggregateInput
    _avg?: thumbnailsAvgOrderByAggregateInput
    _max?: thumbnailsMaxOrderByAggregateInput
    _min?: thumbnailsMinOrderByAggregateInput
    _sum?: thumbnailsSumOrderByAggregateInput
  }

  export type thumbnailsScalarWhereWithAggregatesInput = {
    AND?: thumbnailsScalarWhereWithAggregatesInput | thumbnailsScalarWhereWithAggregatesInput[]
    OR?: thumbnailsScalarWhereWithAggregatesInput[]
    NOT?: thumbnailsScalarWhereWithAggregatesInput | thumbnailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"thumbnails"> | string
    urlDefault?: StringWithAggregatesFilter<"thumbnails"> | string
    widthDefault?: IntWithAggregatesFilter<"thumbnails"> | number
    heightDefault?: IntWithAggregatesFilter<"thumbnails"> | number
    videoId?: StringWithAggregatesFilter<"thumbnails"> | string
  }

  export type videosWhereInput = {
    AND?: videosWhereInput | videosWhereInput[]
    OR?: videosWhereInput[]
    NOT?: videosWhereInput | videosWhereInput[]
    id?: StringFilter<"videos"> | string
    publishedAt?: DateTimeFilter<"videos"> | Date | string
    channelId?: StringFilter<"videos"> | string
    title?: StringFilter<"videos"> | string
    description?: StringFilter<"videos"> | string
    duration?: IntNullableFilter<"videos"> | number | null
    dimension?: StringNullableFilter<"videos"> | string | null
    caption?: BoolNullableFilter<"videos"> | boolean | null
    licensedContent?: BoolNullableFilter<"videos"> | boolean | null
    projection?: StringNullableFilter<"videos"> | string | null
    viewCount?: IntNullableFilter<"videos"> | number | null
    likeCount?: IntNullableFilter<"videos"> | number | null
    favoriteCount?: IntNullableFilter<"videos"> | number | null
    commentCount?: IntNullableFilter<"videos"> | number | null
    shortId?: StringNullableFilter<"videos"> | string | null
    playlist_videos?: Playlist_videosListRelationFilter
    tags?: TagsListRelationFilter
    thumbnails?: ThumbnailsListRelationFilter
    channels?: XOR<ChannelsRelationFilter, channelsWhereInput>
  }

  export type videosOrderByWithRelationInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrderInput | SortOrder
    dimension?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    licensedContent?: SortOrderInput | SortOrder
    projection?: SortOrderInput | SortOrder
    viewCount?: SortOrderInput | SortOrder
    likeCount?: SortOrderInput | SortOrder
    favoriteCount?: SortOrderInput | SortOrder
    commentCount?: SortOrderInput | SortOrder
    shortId?: SortOrderInput | SortOrder
    playlist_videos?: playlist_videosOrderByRelationAggregateInput
    tags?: tagsOrderByRelationAggregateInput
    thumbnails?: thumbnailsOrderByRelationAggregateInput
    channels?: channelsOrderByWithRelationInput
  }

  export type videosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: videosWhereInput | videosWhereInput[]
    OR?: videosWhereInput[]
    NOT?: videosWhereInput | videosWhereInput[]
    publishedAt?: DateTimeFilter<"videos"> | Date | string
    channelId?: StringFilter<"videos"> | string
    title?: StringFilter<"videos"> | string
    description?: StringFilter<"videos"> | string
    duration?: IntNullableFilter<"videos"> | number | null
    dimension?: StringNullableFilter<"videos"> | string | null
    caption?: BoolNullableFilter<"videos"> | boolean | null
    licensedContent?: BoolNullableFilter<"videos"> | boolean | null
    projection?: StringNullableFilter<"videos"> | string | null
    viewCount?: IntNullableFilter<"videos"> | number | null
    likeCount?: IntNullableFilter<"videos"> | number | null
    favoriteCount?: IntNullableFilter<"videos"> | number | null
    commentCount?: IntNullableFilter<"videos"> | number | null
    shortId?: StringNullableFilter<"videos"> | string | null
    playlist_videos?: Playlist_videosListRelationFilter
    tags?: TagsListRelationFilter
    thumbnails?: ThumbnailsListRelationFilter
    channels?: XOR<ChannelsRelationFilter, channelsWhereInput>
  }, "id">

  export type videosOrderByWithAggregationInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrderInput | SortOrder
    dimension?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    licensedContent?: SortOrderInput | SortOrder
    projection?: SortOrderInput | SortOrder
    viewCount?: SortOrderInput | SortOrder
    likeCount?: SortOrderInput | SortOrder
    favoriteCount?: SortOrderInput | SortOrder
    commentCount?: SortOrderInput | SortOrder
    shortId?: SortOrderInput | SortOrder
    _count?: videosCountOrderByAggregateInput
    _avg?: videosAvgOrderByAggregateInput
    _max?: videosMaxOrderByAggregateInput
    _min?: videosMinOrderByAggregateInput
    _sum?: videosSumOrderByAggregateInput
  }

  export type videosScalarWhereWithAggregatesInput = {
    AND?: videosScalarWhereWithAggregatesInput | videosScalarWhereWithAggregatesInput[]
    OR?: videosScalarWhereWithAggregatesInput[]
    NOT?: videosScalarWhereWithAggregatesInput | videosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"videos"> | string
    publishedAt?: DateTimeWithAggregatesFilter<"videos"> | Date | string
    channelId?: StringWithAggregatesFilter<"videos"> | string
    title?: StringWithAggregatesFilter<"videos"> | string
    description?: StringWithAggregatesFilter<"videos"> | string
    duration?: IntNullableWithAggregatesFilter<"videos"> | number | null
    dimension?: StringNullableWithAggregatesFilter<"videos"> | string | null
    caption?: BoolNullableWithAggregatesFilter<"videos"> | boolean | null
    licensedContent?: BoolNullableWithAggregatesFilter<"videos"> | boolean | null
    projection?: StringNullableWithAggregatesFilter<"videos"> | string | null
    viewCount?: IntNullableWithAggregatesFilter<"videos"> | number | null
    likeCount?: IntNullableWithAggregatesFilter<"videos"> | number | null
    favoriteCount?: IntNullableWithAggregatesFilter<"videos"> | number | null
    commentCount?: IntNullableWithAggregatesFilter<"videos"> | number | null
    shortId?: StringNullableWithAggregatesFilter<"videos"> | string | null
  }

  export type brandingsCreateInput = {
    id: string
    title: string
    description: string
    keywords?: brandingsCreatekeywordsInput | string[]
  }

  export type brandingsUncheckedCreateInput = {
    id: string
    title: string
    description: string
    keywords?: brandingsCreatekeywordsInput | string[]
  }

  export type brandingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: brandingsUpdatekeywordsInput | string[]
  }

  export type brandingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: brandingsUpdatekeywordsInput | string[]
  }

  export type brandingsCreateManyInput = {
    id: string
    title: string
    description: string
    keywords?: brandingsCreatekeywordsInput | string[]
  }

  export type brandingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: brandingsUpdatekeywordsInput | string[]
  }

  export type brandingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: brandingsUpdatekeywordsInput | string[]
  }

  export type channelsCreateInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    playlists?: playlistsCreateNestedManyWithoutChannelsInput
    videos?: videosCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    playlists?: playlistsUncheckedCreateNestedManyWithoutChannelsInput
    videos?: videosUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    playlists?: playlistsUpdateManyWithoutChannelsNestedInput
    videos?: videosUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    playlists?: playlistsUncheckedUpdateManyWithoutChannelsNestedInput
    videos?: videosUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsCreateManyInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
  }

  export type channelsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type channelsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type commentsCreateInput = {
    id: string
    channelId: string
    videoId: string
    topLevelCommentId?: string | null
    textDisplay: string
    textOriginal: string
    authorNameDisplay: string
    authorProfileImageUrl: string
    authorChannelUrl: string
    canRate: boolean
    viewerRating: number
    likeCount: number
    publishedAt: Date | string
    updatedAt: Date | string
  }

  export type commentsUncheckedCreateInput = {
    id: string
    channelId: string
    videoId: string
    topLevelCommentId?: string | null
    textDisplay: string
    textOriginal: string
    authorNameDisplay: string
    authorProfileImageUrl: string
    authorChannelUrl: string
    canRate: boolean
    viewerRating: number
    likeCount: number
    publishedAt: Date | string
    updatedAt: Date | string
  }

  export type commentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    topLevelCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    textDisplay?: StringFieldUpdateOperationsInput | string
    textOriginal?: StringFieldUpdateOperationsInput | string
    authorNameDisplay?: StringFieldUpdateOperationsInput | string
    authorProfileImageUrl?: StringFieldUpdateOperationsInput | string
    authorChannelUrl?: StringFieldUpdateOperationsInput | string
    canRate?: BoolFieldUpdateOperationsInput | boolean
    viewerRating?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    topLevelCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    textDisplay?: StringFieldUpdateOperationsInput | string
    textOriginal?: StringFieldUpdateOperationsInput | string
    authorNameDisplay?: StringFieldUpdateOperationsInput | string
    authorProfileImageUrl?: StringFieldUpdateOperationsInput | string
    authorChannelUrl?: StringFieldUpdateOperationsInput | string
    canRate?: BoolFieldUpdateOperationsInput | boolean
    viewerRating?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentsCreateManyInput = {
    id: string
    channelId: string
    videoId: string
    topLevelCommentId?: string | null
    textDisplay: string
    textOriginal: string
    authorNameDisplay: string
    authorProfileImageUrl: string
    authorChannelUrl: string
    canRate: boolean
    viewerRating: number
    likeCount: number
    publishedAt: Date | string
    updatedAt: Date | string
  }

  export type commentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    topLevelCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    textDisplay?: StringFieldUpdateOperationsInput | string
    textOriginal?: StringFieldUpdateOperationsInput | string
    authorNameDisplay?: StringFieldUpdateOperationsInput | string
    authorProfileImageUrl?: StringFieldUpdateOperationsInput | string
    authorChannelUrl?: StringFieldUpdateOperationsInput | string
    canRate?: BoolFieldUpdateOperationsInput | boolean
    viewerRating?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type commentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    topLevelCommentId?: NullableStringFieldUpdateOperationsInput | string | null
    textDisplay?: StringFieldUpdateOperationsInput | string
    textOriginal?: StringFieldUpdateOperationsInput | string
    authorNameDisplay?: StringFieldUpdateOperationsInput | string
    authorProfileImageUrl?: StringFieldUpdateOperationsInput | string
    authorChannelUrl?: StringFieldUpdateOperationsInput | string
    canRate?: BoolFieldUpdateOperationsInput | boolean
    viewerRating?: IntFieldUpdateOperationsInput | number
    likeCount?: IntFieldUpdateOperationsInput | number
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type playlist_videosCreateInput = {
    playlists: playlistsCreateNestedOneWithoutPlaylist_videosInput
    videos: videosCreateNestedOneWithoutPlaylist_videosInput
  }

  export type playlist_videosUncheckedCreateInput = {
    videoId: string
    playlistId: string
  }

  export type playlist_videosUpdateInput = {
    playlists?: playlistsUpdateOneRequiredWithoutPlaylist_videosNestedInput
    videos?: videosUpdateOneRequiredWithoutPlaylist_videosNestedInput
  }

  export type playlist_videosUncheckedUpdateInput = {
    videoId?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
  }

  export type playlist_videosCreateManyInput = {
    videoId: string
    playlistId: string
  }

  export type playlist_videosUpdateManyMutationInput = {

  }

  export type playlist_videosUncheckedUpdateManyInput = {
    videoId?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
  }

  export type playlistsCreateInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    defaultLanguage?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutPlaylistsInput
    channels: channelsCreateNestedOneWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    defaultLanguage?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutPlaylistsNestedInput
    channels?: channelsUpdateOneRequiredWithoutPlaylistsNestedInput
  }

  export type playlistsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutPlaylistsNestedInput
  }

  export type playlistsCreateManyInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    defaultLanguage?: string | null
  }

  export type playlistsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type playlistsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tagsCreateInput = {
    id: string
    text: string
    videos: videosCreateNestedOneWithoutTagsInput
  }

  export type tagsUncheckedCreateInput = {
    id: string
    videoId: string
    text: string
  }

  export type tagsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    videos?: videosUpdateOneRequiredWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type tagsCreateManyInput = {
    id: string
    videoId: string
    text: string
  }

  export type tagsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type tagsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type thumbnailsCreateInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
    videos: videosCreateNestedOneWithoutThumbnailsInput
  }

  export type thumbnailsUncheckedCreateInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
    videoId: string
  }

  export type thumbnailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
    videos?: videosUpdateOneRequiredWithoutThumbnailsNestedInput
  }

  export type thumbnailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type thumbnailsCreateManyInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
    videoId: string
  }

  export type thumbnailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
  }

  export type thumbnailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type videosCreateInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutVideosInput
    tags?: tagsCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsCreateNestedManyWithoutVideosInput
    channels: channelsCreateNestedOneWithoutVideosInput
  }

  export type videosUncheckedCreateInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutVideosInput
    tags?: tagsUncheckedCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsUncheckedCreateNestedManyWithoutVideosInput
  }

  export type videosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutVideosNestedInput
    tags?: tagsUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUpdateManyWithoutVideosNestedInput
    channels?: channelsUpdateOneRequiredWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutVideosNestedInput
    tags?: tagsUncheckedUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUncheckedUpdateManyWithoutVideosNestedInput
  }

  export type videosCreateManyInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
  }

  export type videosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type videosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type brandingsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
  }

  export type brandingsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type brandingsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type PlaylistsListRelationFilter = {
    every?: playlistsWhereInput
    some?: playlistsWhereInput
    none?: playlistsWhereInput
  }

  export type VideosListRelationFilter = {
    every?: videosWhereInput
    some?: videosWhereInput
    none?: videosWhereInput
  }

  export type playlistsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type videosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type channelsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customUrl?: SortOrder
    publishedAt?: SortOrder
    viewCount?: SortOrder
    subscriberCount?: SortOrder
  }

  export type channelsAvgOrderByAggregateInput = {
    viewCount?: SortOrder
    subscriberCount?: SortOrder
  }

  export type channelsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customUrl?: SortOrder
    publishedAt?: SortOrder
    viewCount?: SortOrder
    subscriberCount?: SortOrder
  }

  export type channelsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customUrl?: SortOrder
    publishedAt?: SortOrder
    viewCount?: SortOrder
    subscriberCount?: SortOrder
  }

  export type channelsSumOrderByAggregateInput = {
    viewCount?: SortOrder
    subscriberCount?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type commentsCountOrderByAggregateInput = {
    id?: SortOrder
    channelId?: SortOrder
    videoId?: SortOrder
    topLevelCommentId?: SortOrder
    textDisplay?: SortOrder
    textOriginal?: SortOrder
    authorNameDisplay?: SortOrder
    authorProfileImageUrl?: SortOrder
    authorChannelUrl?: SortOrder
    canRate?: SortOrder
    viewerRating?: SortOrder
    likeCount?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type commentsAvgOrderByAggregateInput = {
    viewerRating?: SortOrder
    likeCount?: SortOrder
  }

  export type commentsMaxOrderByAggregateInput = {
    id?: SortOrder
    channelId?: SortOrder
    videoId?: SortOrder
    topLevelCommentId?: SortOrder
    textDisplay?: SortOrder
    textOriginal?: SortOrder
    authorNameDisplay?: SortOrder
    authorProfileImageUrl?: SortOrder
    authorChannelUrl?: SortOrder
    canRate?: SortOrder
    viewerRating?: SortOrder
    likeCount?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type commentsMinOrderByAggregateInput = {
    id?: SortOrder
    channelId?: SortOrder
    videoId?: SortOrder
    topLevelCommentId?: SortOrder
    textDisplay?: SortOrder
    textOriginal?: SortOrder
    authorNameDisplay?: SortOrder
    authorProfileImageUrl?: SortOrder
    authorChannelUrl?: SortOrder
    canRate?: SortOrder
    viewerRating?: SortOrder
    likeCount?: SortOrder
    publishedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type commentsSumOrderByAggregateInput = {
    viewerRating?: SortOrder
    likeCount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PlaylistsRelationFilter = {
    is?: playlistsWhereInput
    isNot?: playlistsWhereInput
  }

  export type VideosRelationFilter = {
    is?: videosWhereInput
    isNot?: videosWhereInput
  }

  export type playlist_videosVideoIdPlaylistIdCompoundUniqueInput = {
    videoId: string
    playlistId: string
  }

  export type playlist_videosCountOrderByAggregateInput = {
    videoId?: SortOrder
    playlistId?: SortOrder
  }

  export type playlist_videosMaxOrderByAggregateInput = {
    videoId?: SortOrder
    playlistId?: SortOrder
  }

  export type playlist_videosMinOrderByAggregateInput = {
    videoId?: SortOrder
    playlistId?: SortOrder
  }

  export type Playlist_videosListRelationFilter = {
    every?: playlist_videosWhereInput
    some?: playlist_videosWhereInput
    none?: playlist_videosWhereInput
  }

  export type ChannelsRelationFilter = {
    is?: channelsWhereInput
    isNot?: channelsWhereInput
  }

  export type playlist_videosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type playlistsCountOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    defaultLanguage?: SortOrder
  }

  export type playlistsMaxOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    defaultLanguage?: SortOrder
  }

  export type playlistsMinOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    defaultLanguage?: SortOrder
  }

  export type tagsCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    text?: SortOrder
  }

  export type tagsMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    text?: SortOrder
  }

  export type tagsMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    text?: SortOrder
  }

  export type thumbnailsCountOrderByAggregateInput = {
    id?: SortOrder
    urlDefault?: SortOrder
    widthDefault?: SortOrder
    heightDefault?: SortOrder
    videoId?: SortOrder
  }

  export type thumbnailsAvgOrderByAggregateInput = {
    widthDefault?: SortOrder
    heightDefault?: SortOrder
  }

  export type thumbnailsMaxOrderByAggregateInput = {
    id?: SortOrder
    urlDefault?: SortOrder
    widthDefault?: SortOrder
    heightDefault?: SortOrder
    videoId?: SortOrder
  }

  export type thumbnailsMinOrderByAggregateInput = {
    id?: SortOrder
    urlDefault?: SortOrder
    widthDefault?: SortOrder
    heightDefault?: SortOrder
    videoId?: SortOrder
  }

  export type thumbnailsSumOrderByAggregateInput = {
    widthDefault?: SortOrder
    heightDefault?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type TagsListRelationFilter = {
    every?: tagsWhereInput
    some?: tagsWhereInput
    none?: tagsWhereInput
  }

  export type ThumbnailsListRelationFilter = {
    every?: thumbnailsWhereInput
    some?: thumbnailsWhereInput
    none?: thumbnailsWhereInput
  }

  export type tagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type thumbnailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type videosCountOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    dimension?: SortOrder
    caption?: SortOrder
    licensedContent?: SortOrder
    projection?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    favoriteCount?: SortOrder
    commentCount?: SortOrder
    shortId?: SortOrder
  }

  export type videosAvgOrderByAggregateInput = {
    duration?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    favoriteCount?: SortOrder
    commentCount?: SortOrder
  }

  export type videosMaxOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    dimension?: SortOrder
    caption?: SortOrder
    licensedContent?: SortOrder
    projection?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    favoriteCount?: SortOrder
    commentCount?: SortOrder
    shortId?: SortOrder
  }

  export type videosMinOrderByAggregateInput = {
    id?: SortOrder
    publishedAt?: SortOrder
    channelId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    dimension?: SortOrder
    caption?: SortOrder
    licensedContent?: SortOrder
    projection?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    favoriteCount?: SortOrder
    commentCount?: SortOrder
    shortId?: SortOrder
  }

  export type videosSumOrderByAggregateInput = {
    duration?: SortOrder
    viewCount?: SortOrder
    likeCount?: SortOrder
    favoriteCount?: SortOrder
    commentCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type brandingsCreatekeywordsInput = {
    set: string[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type brandingsUpdatekeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type playlistsCreateNestedManyWithoutChannelsInput = {
    create?: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput> | playlistsCreateWithoutChannelsInput[] | playlistsUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: playlistsCreateOrConnectWithoutChannelsInput | playlistsCreateOrConnectWithoutChannelsInput[]
    createMany?: playlistsCreateManyChannelsInputEnvelope
    connect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
  }

  export type videosCreateNestedManyWithoutChannelsInput = {
    create?: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput> | videosCreateWithoutChannelsInput[] | videosUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: videosCreateOrConnectWithoutChannelsInput | videosCreateOrConnectWithoutChannelsInput[]
    createMany?: videosCreateManyChannelsInputEnvelope
    connect?: videosWhereUniqueInput | videosWhereUniqueInput[]
  }

  export type playlistsUncheckedCreateNestedManyWithoutChannelsInput = {
    create?: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput> | playlistsCreateWithoutChannelsInput[] | playlistsUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: playlistsCreateOrConnectWithoutChannelsInput | playlistsCreateOrConnectWithoutChannelsInput[]
    createMany?: playlistsCreateManyChannelsInputEnvelope
    connect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
  }

  export type videosUncheckedCreateNestedManyWithoutChannelsInput = {
    create?: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput> | videosCreateWithoutChannelsInput[] | videosUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: videosCreateOrConnectWithoutChannelsInput | videosCreateOrConnectWithoutChannelsInput[]
    createMany?: videosCreateManyChannelsInputEnvelope
    connect?: videosWhereUniqueInput | videosWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type playlistsUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput> | playlistsCreateWithoutChannelsInput[] | playlistsUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: playlistsCreateOrConnectWithoutChannelsInput | playlistsCreateOrConnectWithoutChannelsInput[]
    upsert?: playlistsUpsertWithWhereUniqueWithoutChannelsInput | playlistsUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: playlistsCreateManyChannelsInputEnvelope
    set?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    disconnect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    delete?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    connect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    update?: playlistsUpdateWithWhereUniqueWithoutChannelsInput | playlistsUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: playlistsUpdateManyWithWhereWithoutChannelsInput | playlistsUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: playlistsScalarWhereInput | playlistsScalarWhereInput[]
  }

  export type videosUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput> | videosCreateWithoutChannelsInput[] | videosUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: videosCreateOrConnectWithoutChannelsInput | videosCreateOrConnectWithoutChannelsInput[]
    upsert?: videosUpsertWithWhereUniqueWithoutChannelsInput | videosUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: videosCreateManyChannelsInputEnvelope
    set?: videosWhereUniqueInput | videosWhereUniqueInput[]
    disconnect?: videosWhereUniqueInput | videosWhereUniqueInput[]
    delete?: videosWhereUniqueInput | videosWhereUniqueInput[]
    connect?: videosWhereUniqueInput | videosWhereUniqueInput[]
    update?: videosUpdateWithWhereUniqueWithoutChannelsInput | videosUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: videosUpdateManyWithWhereWithoutChannelsInput | videosUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: videosScalarWhereInput | videosScalarWhereInput[]
  }

  export type playlistsUncheckedUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput> | playlistsCreateWithoutChannelsInput[] | playlistsUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: playlistsCreateOrConnectWithoutChannelsInput | playlistsCreateOrConnectWithoutChannelsInput[]
    upsert?: playlistsUpsertWithWhereUniqueWithoutChannelsInput | playlistsUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: playlistsCreateManyChannelsInputEnvelope
    set?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    disconnect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    delete?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    connect?: playlistsWhereUniqueInput | playlistsWhereUniqueInput[]
    update?: playlistsUpdateWithWhereUniqueWithoutChannelsInput | playlistsUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: playlistsUpdateManyWithWhereWithoutChannelsInput | playlistsUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: playlistsScalarWhereInput | playlistsScalarWhereInput[]
  }

  export type videosUncheckedUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput> | videosCreateWithoutChannelsInput[] | videosUncheckedCreateWithoutChannelsInput[]
    connectOrCreate?: videosCreateOrConnectWithoutChannelsInput | videosCreateOrConnectWithoutChannelsInput[]
    upsert?: videosUpsertWithWhereUniqueWithoutChannelsInput | videosUpsertWithWhereUniqueWithoutChannelsInput[]
    createMany?: videosCreateManyChannelsInputEnvelope
    set?: videosWhereUniqueInput | videosWhereUniqueInput[]
    disconnect?: videosWhereUniqueInput | videosWhereUniqueInput[]
    delete?: videosWhereUniqueInput | videosWhereUniqueInput[]
    connect?: videosWhereUniqueInput | videosWhereUniqueInput[]
    update?: videosUpdateWithWhereUniqueWithoutChannelsInput | videosUpdateWithWhereUniqueWithoutChannelsInput[]
    updateMany?: videosUpdateManyWithWhereWithoutChannelsInput | videosUpdateManyWithWhereWithoutChannelsInput[]
    deleteMany?: videosScalarWhereInput | videosScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type playlistsCreateNestedOneWithoutPlaylist_videosInput = {
    create?: XOR<playlistsCreateWithoutPlaylist_videosInput, playlistsUncheckedCreateWithoutPlaylist_videosInput>
    connectOrCreate?: playlistsCreateOrConnectWithoutPlaylist_videosInput
    connect?: playlistsWhereUniqueInput
  }

  export type videosCreateNestedOneWithoutPlaylist_videosInput = {
    create?: XOR<videosCreateWithoutPlaylist_videosInput, videosUncheckedCreateWithoutPlaylist_videosInput>
    connectOrCreate?: videosCreateOrConnectWithoutPlaylist_videosInput
    connect?: videosWhereUniqueInput
  }

  export type playlistsUpdateOneRequiredWithoutPlaylist_videosNestedInput = {
    create?: XOR<playlistsCreateWithoutPlaylist_videosInput, playlistsUncheckedCreateWithoutPlaylist_videosInput>
    connectOrCreate?: playlistsCreateOrConnectWithoutPlaylist_videosInput
    upsert?: playlistsUpsertWithoutPlaylist_videosInput
    connect?: playlistsWhereUniqueInput
    update?: XOR<XOR<playlistsUpdateToOneWithWhereWithoutPlaylist_videosInput, playlistsUpdateWithoutPlaylist_videosInput>, playlistsUncheckedUpdateWithoutPlaylist_videosInput>
  }

  export type videosUpdateOneRequiredWithoutPlaylist_videosNestedInput = {
    create?: XOR<videosCreateWithoutPlaylist_videosInput, videosUncheckedCreateWithoutPlaylist_videosInput>
    connectOrCreate?: videosCreateOrConnectWithoutPlaylist_videosInput
    upsert?: videosUpsertWithoutPlaylist_videosInput
    connect?: videosWhereUniqueInput
    update?: XOR<XOR<videosUpdateToOneWithWhereWithoutPlaylist_videosInput, videosUpdateWithoutPlaylist_videosInput>, videosUncheckedUpdateWithoutPlaylist_videosInput>
  }

  export type playlist_videosCreateNestedManyWithoutPlaylistsInput = {
    create?: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput> | playlist_videosCreateWithoutPlaylistsInput[] | playlist_videosUncheckedCreateWithoutPlaylistsInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutPlaylistsInput | playlist_videosCreateOrConnectWithoutPlaylistsInput[]
    createMany?: playlist_videosCreateManyPlaylistsInputEnvelope
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
  }

  export type channelsCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<channelsCreateWithoutPlaylistsInput, channelsUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: channelsCreateOrConnectWithoutPlaylistsInput
    connect?: channelsWhereUniqueInput
  }

  export type playlist_videosUncheckedCreateNestedManyWithoutPlaylistsInput = {
    create?: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput> | playlist_videosCreateWithoutPlaylistsInput[] | playlist_videosUncheckedCreateWithoutPlaylistsInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutPlaylistsInput | playlist_videosCreateOrConnectWithoutPlaylistsInput[]
    createMany?: playlist_videosCreateManyPlaylistsInputEnvelope
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
  }

  export type playlist_videosUpdateManyWithoutPlaylistsNestedInput = {
    create?: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput> | playlist_videosCreateWithoutPlaylistsInput[] | playlist_videosUncheckedCreateWithoutPlaylistsInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutPlaylistsInput | playlist_videosCreateOrConnectWithoutPlaylistsInput[]
    upsert?: playlist_videosUpsertWithWhereUniqueWithoutPlaylistsInput | playlist_videosUpsertWithWhereUniqueWithoutPlaylistsInput[]
    createMany?: playlist_videosCreateManyPlaylistsInputEnvelope
    set?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    disconnect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    delete?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    update?: playlist_videosUpdateWithWhereUniqueWithoutPlaylistsInput | playlist_videosUpdateWithWhereUniqueWithoutPlaylistsInput[]
    updateMany?: playlist_videosUpdateManyWithWhereWithoutPlaylistsInput | playlist_videosUpdateManyWithWhereWithoutPlaylistsInput[]
    deleteMany?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
  }

  export type channelsUpdateOneRequiredWithoutPlaylistsNestedInput = {
    create?: XOR<channelsCreateWithoutPlaylistsInput, channelsUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: channelsCreateOrConnectWithoutPlaylistsInput
    upsert?: channelsUpsertWithoutPlaylistsInput
    connect?: channelsWhereUniqueInput
    update?: XOR<XOR<channelsUpdateToOneWithWhereWithoutPlaylistsInput, channelsUpdateWithoutPlaylistsInput>, channelsUncheckedUpdateWithoutPlaylistsInput>
  }

  export type playlist_videosUncheckedUpdateManyWithoutPlaylistsNestedInput = {
    create?: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput> | playlist_videosCreateWithoutPlaylistsInput[] | playlist_videosUncheckedCreateWithoutPlaylistsInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutPlaylistsInput | playlist_videosCreateOrConnectWithoutPlaylistsInput[]
    upsert?: playlist_videosUpsertWithWhereUniqueWithoutPlaylistsInput | playlist_videosUpsertWithWhereUniqueWithoutPlaylistsInput[]
    createMany?: playlist_videosCreateManyPlaylistsInputEnvelope
    set?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    disconnect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    delete?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    update?: playlist_videosUpdateWithWhereUniqueWithoutPlaylistsInput | playlist_videosUpdateWithWhereUniqueWithoutPlaylistsInput[]
    updateMany?: playlist_videosUpdateManyWithWhereWithoutPlaylistsInput | playlist_videosUpdateManyWithWhereWithoutPlaylistsInput[]
    deleteMany?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
  }

  export type videosCreateNestedOneWithoutTagsInput = {
    create?: XOR<videosCreateWithoutTagsInput, videosUncheckedCreateWithoutTagsInput>
    connectOrCreate?: videosCreateOrConnectWithoutTagsInput
    connect?: videosWhereUniqueInput
  }

  export type videosUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<videosCreateWithoutTagsInput, videosUncheckedCreateWithoutTagsInput>
    connectOrCreate?: videosCreateOrConnectWithoutTagsInput
    upsert?: videosUpsertWithoutTagsInput
    connect?: videosWhereUniqueInput
    update?: XOR<XOR<videosUpdateToOneWithWhereWithoutTagsInput, videosUpdateWithoutTagsInput>, videosUncheckedUpdateWithoutTagsInput>
  }

  export type videosCreateNestedOneWithoutThumbnailsInput = {
    create?: XOR<videosCreateWithoutThumbnailsInput, videosUncheckedCreateWithoutThumbnailsInput>
    connectOrCreate?: videosCreateOrConnectWithoutThumbnailsInput
    connect?: videosWhereUniqueInput
  }

  export type videosUpdateOneRequiredWithoutThumbnailsNestedInput = {
    create?: XOR<videosCreateWithoutThumbnailsInput, videosUncheckedCreateWithoutThumbnailsInput>
    connectOrCreate?: videosCreateOrConnectWithoutThumbnailsInput
    upsert?: videosUpsertWithoutThumbnailsInput
    connect?: videosWhereUniqueInput
    update?: XOR<XOR<videosUpdateToOneWithWhereWithoutThumbnailsInput, videosUpdateWithoutThumbnailsInput>, videosUncheckedUpdateWithoutThumbnailsInput>
  }

  export type playlist_videosCreateNestedManyWithoutVideosInput = {
    create?: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput> | playlist_videosCreateWithoutVideosInput[] | playlist_videosUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutVideosInput | playlist_videosCreateOrConnectWithoutVideosInput[]
    createMany?: playlist_videosCreateManyVideosInputEnvelope
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
  }

  export type tagsCreateNestedManyWithoutVideosInput = {
    create?: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput> | tagsCreateWithoutVideosInput[] | tagsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: tagsCreateOrConnectWithoutVideosInput | tagsCreateOrConnectWithoutVideosInput[]
    createMany?: tagsCreateManyVideosInputEnvelope
    connect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
  }

  export type thumbnailsCreateNestedManyWithoutVideosInput = {
    create?: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput> | thumbnailsCreateWithoutVideosInput[] | thumbnailsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: thumbnailsCreateOrConnectWithoutVideosInput | thumbnailsCreateOrConnectWithoutVideosInput[]
    createMany?: thumbnailsCreateManyVideosInputEnvelope
    connect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
  }

  export type channelsCreateNestedOneWithoutVideosInput = {
    create?: XOR<channelsCreateWithoutVideosInput, channelsUncheckedCreateWithoutVideosInput>
    connectOrCreate?: channelsCreateOrConnectWithoutVideosInput
    connect?: channelsWhereUniqueInput
  }

  export type playlist_videosUncheckedCreateNestedManyWithoutVideosInput = {
    create?: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput> | playlist_videosCreateWithoutVideosInput[] | playlist_videosUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutVideosInput | playlist_videosCreateOrConnectWithoutVideosInput[]
    createMany?: playlist_videosCreateManyVideosInputEnvelope
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
  }

  export type tagsUncheckedCreateNestedManyWithoutVideosInput = {
    create?: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput> | tagsCreateWithoutVideosInput[] | tagsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: tagsCreateOrConnectWithoutVideosInput | tagsCreateOrConnectWithoutVideosInput[]
    createMany?: tagsCreateManyVideosInputEnvelope
    connect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
  }

  export type thumbnailsUncheckedCreateNestedManyWithoutVideosInput = {
    create?: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput> | thumbnailsCreateWithoutVideosInput[] | thumbnailsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: thumbnailsCreateOrConnectWithoutVideosInput | thumbnailsCreateOrConnectWithoutVideosInput[]
    createMany?: thumbnailsCreateManyVideosInputEnvelope
    connect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type playlist_videosUpdateManyWithoutVideosNestedInput = {
    create?: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput> | playlist_videosCreateWithoutVideosInput[] | playlist_videosUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutVideosInput | playlist_videosCreateOrConnectWithoutVideosInput[]
    upsert?: playlist_videosUpsertWithWhereUniqueWithoutVideosInput | playlist_videosUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: playlist_videosCreateManyVideosInputEnvelope
    set?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    disconnect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    delete?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    update?: playlist_videosUpdateWithWhereUniqueWithoutVideosInput | playlist_videosUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: playlist_videosUpdateManyWithWhereWithoutVideosInput | playlist_videosUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
  }

  export type tagsUpdateManyWithoutVideosNestedInput = {
    create?: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput> | tagsCreateWithoutVideosInput[] | tagsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: tagsCreateOrConnectWithoutVideosInput | tagsCreateOrConnectWithoutVideosInput[]
    upsert?: tagsUpsertWithWhereUniqueWithoutVideosInput | tagsUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: tagsCreateManyVideosInputEnvelope
    set?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    disconnect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    delete?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    connect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    update?: tagsUpdateWithWhereUniqueWithoutVideosInput | tagsUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: tagsUpdateManyWithWhereWithoutVideosInput | tagsUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: tagsScalarWhereInput | tagsScalarWhereInput[]
  }

  export type thumbnailsUpdateManyWithoutVideosNestedInput = {
    create?: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput> | thumbnailsCreateWithoutVideosInput[] | thumbnailsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: thumbnailsCreateOrConnectWithoutVideosInput | thumbnailsCreateOrConnectWithoutVideosInput[]
    upsert?: thumbnailsUpsertWithWhereUniqueWithoutVideosInput | thumbnailsUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: thumbnailsCreateManyVideosInputEnvelope
    set?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    disconnect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    delete?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    connect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    update?: thumbnailsUpdateWithWhereUniqueWithoutVideosInput | thumbnailsUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: thumbnailsUpdateManyWithWhereWithoutVideosInput | thumbnailsUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: thumbnailsScalarWhereInput | thumbnailsScalarWhereInput[]
  }

  export type channelsUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<channelsCreateWithoutVideosInput, channelsUncheckedCreateWithoutVideosInput>
    connectOrCreate?: channelsCreateOrConnectWithoutVideosInput
    upsert?: channelsUpsertWithoutVideosInput
    connect?: channelsWhereUniqueInput
    update?: XOR<XOR<channelsUpdateToOneWithWhereWithoutVideosInput, channelsUpdateWithoutVideosInput>, channelsUncheckedUpdateWithoutVideosInput>
  }

  export type playlist_videosUncheckedUpdateManyWithoutVideosNestedInput = {
    create?: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput> | playlist_videosCreateWithoutVideosInput[] | playlist_videosUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: playlist_videosCreateOrConnectWithoutVideosInput | playlist_videosCreateOrConnectWithoutVideosInput[]
    upsert?: playlist_videosUpsertWithWhereUniqueWithoutVideosInput | playlist_videosUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: playlist_videosCreateManyVideosInputEnvelope
    set?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    disconnect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    delete?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    connect?: playlist_videosWhereUniqueInput | playlist_videosWhereUniqueInput[]
    update?: playlist_videosUpdateWithWhereUniqueWithoutVideosInput | playlist_videosUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: playlist_videosUpdateManyWithWhereWithoutVideosInput | playlist_videosUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
  }

  export type tagsUncheckedUpdateManyWithoutVideosNestedInput = {
    create?: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput> | tagsCreateWithoutVideosInput[] | tagsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: tagsCreateOrConnectWithoutVideosInput | tagsCreateOrConnectWithoutVideosInput[]
    upsert?: tagsUpsertWithWhereUniqueWithoutVideosInput | tagsUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: tagsCreateManyVideosInputEnvelope
    set?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    disconnect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    delete?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    connect?: tagsWhereUniqueInput | tagsWhereUniqueInput[]
    update?: tagsUpdateWithWhereUniqueWithoutVideosInput | tagsUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: tagsUpdateManyWithWhereWithoutVideosInput | tagsUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: tagsScalarWhereInput | tagsScalarWhereInput[]
  }

  export type thumbnailsUncheckedUpdateManyWithoutVideosNestedInput = {
    create?: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput> | thumbnailsCreateWithoutVideosInput[] | thumbnailsUncheckedCreateWithoutVideosInput[]
    connectOrCreate?: thumbnailsCreateOrConnectWithoutVideosInput | thumbnailsCreateOrConnectWithoutVideosInput[]
    upsert?: thumbnailsUpsertWithWhereUniqueWithoutVideosInput | thumbnailsUpsertWithWhereUniqueWithoutVideosInput[]
    createMany?: thumbnailsCreateManyVideosInputEnvelope
    set?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    disconnect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    delete?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    connect?: thumbnailsWhereUniqueInput | thumbnailsWhereUniqueInput[]
    update?: thumbnailsUpdateWithWhereUniqueWithoutVideosInput | thumbnailsUpdateWithWhereUniqueWithoutVideosInput[]
    updateMany?: thumbnailsUpdateManyWithWhereWithoutVideosInput | thumbnailsUpdateManyWithWhereWithoutVideosInput[]
    deleteMany?: thumbnailsScalarWhereInput | thumbnailsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type playlistsCreateWithoutChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    defaultLanguage?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateWithoutChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    defaultLanguage?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsCreateOrConnectWithoutChannelsInput = {
    where: playlistsWhereUniqueInput
    create: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput>
  }

  export type playlistsCreateManyChannelsInputEnvelope = {
    data: playlistsCreateManyChannelsInput | playlistsCreateManyChannelsInput[]
    skipDuplicates?: boolean
  }

  export type videosCreateWithoutChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutVideosInput
    tags?: tagsCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsCreateNestedManyWithoutVideosInput
  }

  export type videosUncheckedCreateWithoutChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutVideosInput
    tags?: tagsUncheckedCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsUncheckedCreateNestedManyWithoutVideosInput
  }

  export type videosCreateOrConnectWithoutChannelsInput = {
    where: videosWhereUniqueInput
    create: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput>
  }

  export type videosCreateManyChannelsInputEnvelope = {
    data: videosCreateManyChannelsInput | videosCreateManyChannelsInput[]
    skipDuplicates?: boolean
  }

  export type playlistsUpsertWithWhereUniqueWithoutChannelsInput = {
    where: playlistsWhereUniqueInput
    update: XOR<playlistsUpdateWithoutChannelsInput, playlistsUncheckedUpdateWithoutChannelsInput>
    create: XOR<playlistsCreateWithoutChannelsInput, playlistsUncheckedCreateWithoutChannelsInput>
  }

  export type playlistsUpdateWithWhereUniqueWithoutChannelsInput = {
    where: playlistsWhereUniqueInput
    data: XOR<playlistsUpdateWithoutChannelsInput, playlistsUncheckedUpdateWithoutChannelsInput>
  }

  export type playlistsUpdateManyWithWhereWithoutChannelsInput = {
    where: playlistsScalarWhereInput
    data: XOR<playlistsUpdateManyMutationInput, playlistsUncheckedUpdateManyWithoutChannelsInput>
  }

  export type playlistsScalarWhereInput = {
    AND?: playlistsScalarWhereInput | playlistsScalarWhereInput[]
    OR?: playlistsScalarWhereInput[]
    NOT?: playlistsScalarWhereInput | playlistsScalarWhereInput[]
    id?: StringFilter<"playlists"> | string
    publishedAt?: DateTimeFilter<"playlists"> | Date | string
    channelId?: StringFilter<"playlists"> | string
    title?: StringFilter<"playlists"> | string
    description?: StringFilter<"playlists"> | string
    defaultLanguage?: StringNullableFilter<"playlists"> | string | null
  }

  export type videosUpsertWithWhereUniqueWithoutChannelsInput = {
    where: videosWhereUniqueInput
    update: XOR<videosUpdateWithoutChannelsInput, videosUncheckedUpdateWithoutChannelsInput>
    create: XOR<videosCreateWithoutChannelsInput, videosUncheckedCreateWithoutChannelsInput>
  }

  export type videosUpdateWithWhereUniqueWithoutChannelsInput = {
    where: videosWhereUniqueInput
    data: XOR<videosUpdateWithoutChannelsInput, videosUncheckedUpdateWithoutChannelsInput>
  }

  export type videosUpdateManyWithWhereWithoutChannelsInput = {
    where: videosScalarWhereInput
    data: XOR<videosUpdateManyMutationInput, videosUncheckedUpdateManyWithoutChannelsInput>
  }

  export type videosScalarWhereInput = {
    AND?: videosScalarWhereInput | videosScalarWhereInput[]
    OR?: videosScalarWhereInput[]
    NOT?: videosScalarWhereInput | videosScalarWhereInput[]
    id?: StringFilter<"videos"> | string
    publishedAt?: DateTimeFilter<"videos"> | Date | string
    channelId?: StringFilter<"videos"> | string
    title?: StringFilter<"videos"> | string
    description?: StringFilter<"videos"> | string
    duration?: IntNullableFilter<"videos"> | number | null
    dimension?: StringNullableFilter<"videos"> | string | null
    caption?: BoolNullableFilter<"videos"> | boolean | null
    licensedContent?: BoolNullableFilter<"videos"> | boolean | null
    projection?: StringNullableFilter<"videos"> | string | null
    viewCount?: IntNullableFilter<"videos"> | number | null
    likeCount?: IntNullableFilter<"videos"> | number | null
    favoriteCount?: IntNullableFilter<"videos"> | number | null
    commentCount?: IntNullableFilter<"videos"> | number | null
    shortId?: StringNullableFilter<"videos"> | string | null
  }

  export type playlistsCreateWithoutPlaylist_videosInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    defaultLanguage?: string | null
    channels: channelsCreateNestedOneWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateWithoutPlaylist_videosInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    defaultLanguage?: string | null
  }

  export type playlistsCreateOrConnectWithoutPlaylist_videosInput = {
    where: playlistsWhereUniqueInput
    create: XOR<playlistsCreateWithoutPlaylist_videosInput, playlistsUncheckedCreateWithoutPlaylist_videosInput>
  }

  export type videosCreateWithoutPlaylist_videosInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    tags?: tagsCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsCreateNestedManyWithoutVideosInput
    channels: channelsCreateNestedOneWithoutVideosInput
  }

  export type videosUncheckedCreateWithoutPlaylist_videosInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    tags?: tagsUncheckedCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsUncheckedCreateNestedManyWithoutVideosInput
  }

  export type videosCreateOrConnectWithoutPlaylist_videosInput = {
    where: videosWhereUniqueInput
    create: XOR<videosCreateWithoutPlaylist_videosInput, videosUncheckedCreateWithoutPlaylist_videosInput>
  }

  export type playlistsUpsertWithoutPlaylist_videosInput = {
    update: XOR<playlistsUpdateWithoutPlaylist_videosInput, playlistsUncheckedUpdateWithoutPlaylist_videosInput>
    create: XOR<playlistsCreateWithoutPlaylist_videosInput, playlistsUncheckedCreateWithoutPlaylist_videosInput>
    where?: playlistsWhereInput
  }

  export type playlistsUpdateToOneWithWhereWithoutPlaylist_videosInput = {
    where?: playlistsWhereInput
    data: XOR<playlistsUpdateWithoutPlaylist_videosInput, playlistsUncheckedUpdateWithoutPlaylist_videosInput>
  }

  export type playlistsUpdateWithoutPlaylist_videosInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: channelsUpdateOneRequiredWithoutPlaylistsNestedInput
  }

  export type playlistsUncheckedUpdateWithoutPlaylist_videosInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type videosUpsertWithoutPlaylist_videosInput = {
    update: XOR<videosUpdateWithoutPlaylist_videosInput, videosUncheckedUpdateWithoutPlaylist_videosInput>
    create: XOR<videosCreateWithoutPlaylist_videosInput, videosUncheckedCreateWithoutPlaylist_videosInput>
    where?: videosWhereInput
  }

  export type videosUpdateToOneWithWhereWithoutPlaylist_videosInput = {
    where?: videosWhereInput
    data: XOR<videosUpdateWithoutPlaylist_videosInput, videosUncheckedUpdateWithoutPlaylist_videosInput>
  }

  export type videosUpdateWithoutPlaylist_videosInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: tagsUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUpdateManyWithoutVideosNestedInput
    channels?: channelsUpdateOneRequiredWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateWithoutPlaylist_videosInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: tagsUncheckedUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUncheckedUpdateManyWithoutVideosNestedInput
  }

  export type playlist_videosCreateWithoutPlaylistsInput = {
    videos: videosCreateNestedOneWithoutPlaylist_videosInput
  }

  export type playlist_videosUncheckedCreateWithoutPlaylistsInput = {
    videoId: string
  }

  export type playlist_videosCreateOrConnectWithoutPlaylistsInput = {
    where: playlist_videosWhereUniqueInput
    create: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput>
  }

  export type playlist_videosCreateManyPlaylistsInputEnvelope = {
    data: playlist_videosCreateManyPlaylistsInput | playlist_videosCreateManyPlaylistsInput[]
    skipDuplicates?: boolean
  }

  export type channelsCreateWithoutPlaylistsInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    videos?: videosCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutPlaylistsInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    videos?: videosUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutPlaylistsInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutPlaylistsInput, channelsUncheckedCreateWithoutPlaylistsInput>
  }

  export type playlist_videosUpsertWithWhereUniqueWithoutPlaylistsInput = {
    where: playlist_videosWhereUniqueInput
    update: XOR<playlist_videosUpdateWithoutPlaylistsInput, playlist_videosUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<playlist_videosCreateWithoutPlaylistsInput, playlist_videosUncheckedCreateWithoutPlaylistsInput>
  }

  export type playlist_videosUpdateWithWhereUniqueWithoutPlaylistsInput = {
    where: playlist_videosWhereUniqueInput
    data: XOR<playlist_videosUpdateWithoutPlaylistsInput, playlist_videosUncheckedUpdateWithoutPlaylistsInput>
  }

  export type playlist_videosUpdateManyWithWhereWithoutPlaylistsInput = {
    where: playlist_videosScalarWhereInput
    data: XOR<playlist_videosUpdateManyMutationInput, playlist_videosUncheckedUpdateManyWithoutPlaylistsInput>
  }

  export type playlist_videosScalarWhereInput = {
    AND?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
    OR?: playlist_videosScalarWhereInput[]
    NOT?: playlist_videosScalarWhereInput | playlist_videosScalarWhereInput[]
    videoId?: StringFilter<"playlist_videos"> | string
    playlistId?: StringFilter<"playlist_videos"> | string
  }

  export type channelsUpsertWithoutPlaylistsInput = {
    update: XOR<channelsUpdateWithoutPlaylistsInput, channelsUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<channelsCreateWithoutPlaylistsInput, channelsUncheckedCreateWithoutPlaylistsInput>
    where?: channelsWhereInput
  }

  export type channelsUpdateToOneWithWhereWithoutPlaylistsInput = {
    where?: channelsWhereInput
    data: XOR<channelsUpdateWithoutPlaylistsInput, channelsUncheckedUpdateWithoutPlaylistsInput>
  }

  export type channelsUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    videos?: videosUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    videos?: videosUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type videosCreateWithoutTagsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsCreateNestedManyWithoutVideosInput
    channels: channelsCreateNestedOneWithoutVideosInput
  }

  export type videosUncheckedCreateWithoutTagsInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutVideosInput
    thumbnails?: thumbnailsUncheckedCreateNestedManyWithoutVideosInput
  }

  export type videosCreateOrConnectWithoutTagsInput = {
    where: videosWhereUniqueInput
    create: XOR<videosCreateWithoutTagsInput, videosUncheckedCreateWithoutTagsInput>
  }

  export type videosUpsertWithoutTagsInput = {
    update: XOR<videosUpdateWithoutTagsInput, videosUncheckedUpdateWithoutTagsInput>
    create: XOR<videosCreateWithoutTagsInput, videosUncheckedCreateWithoutTagsInput>
    where?: videosWhereInput
  }

  export type videosUpdateToOneWithWhereWithoutTagsInput = {
    where?: videosWhereInput
    data: XOR<videosUpdateWithoutTagsInput, videosUncheckedUpdateWithoutTagsInput>
  }

  export type videosUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUpdateManyWithoutVideosNestedInput
    channels?: channelsUpdateOneRequiredWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUncheckedUpdateManyWithoutVideosNestedInput
  }

  export type videosCreateWithoutThumbnailsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosCreateNestedManyWithoutVideosInput
    tags?: tagsCreateNestedManyWithoutVideosInput
    channels: channelsCreateNestedOneWithoutVideosInput
  }

  export type videosUncheckedCreateWithoutThumbnailsInput = {
    id: string
    publishedAt: Date | string
    channelId: string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
    playlist_videos?: playlist_videosUncheckedCreateNestedManyWithoutVideosInput
    tags?: tagsUncheckedCreateNestedManyWithoutVideosInput
  }

  export type videosCreateOrConnectWithoutThumbnailsInput = {
    where: videosWhereUniqueInput
    create: XOR<videosCreateWithoutThumbnailsInput, videosUncheckedCreateWithoutThumbnailsInput>
  }

  export type videosUpsertWithoutThumbnailsInput = {
    update: XOR<videosUpdateWithoutThumbnailsInput, videosUncheckedUpdateWithoutThumbnailsInput>
    create: XOR<videosCreateWithoutThumbnailsInput, videosUncheckedCreateWithoutThumbnailsInput>
    where?: videosWhereInput
  }

  export type videosUpdateToOneWithWhereWithoutThumbnailsInput = {
    where?: videosWhereInput
    data: XOR<videosUpdateWithoutThumbnailsInput, videosUncheckedUpdateWithoutThumbnailsInput>
  }

  export type videosUpdateWithoutThumbnailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutVideosNestedInput
    tags?: tagsUpdateManyWithoutVideosNestedInput
    channels?: channelsUpdateOneRequiredWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateWithoutThumbnailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutVideosNestedInput
    tags?: tagsUncheckedUpdateManyWithoutVideosNestedInput
  }

  export type playlist_videosCreateWithoutVideosInput = {
    playlists: playlistsCreateNestedOneWithoutPlaylist_videosInput
  }

  export type playlist_videosUncheckedCreateWithoutVideosInput = {
    playlistId: string
  }

  export type playlist_videosCreateOrConnectWithoutVideosInput = {
    where: playlist_videosWhereUniqueInput
    create: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput>
  }

  export type playlist_videosCreateManyVideosInputEnvelope = {
    data: playlist_videosCreateManyVideosInput | playlist_videosCreateManyVideosInput[]
    skipDuplicates?: boolean
  }

  export type tagsCreateWithoutVideosInput = {
    id: string
    text: string
  }

  export type tagsUncheckedCreateWithoutVideosInput = {
    id: string
    text: string
  }

  export type tagsCreateOrConnectWithoutVideosInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput>
  }

  export type tagsCreateManyVideosInputEnvelope = {
    data: tagsCreateManyVideosInput | tagsCreateManyVideosInput[]
    skipDuplicates?: boolean
  }

  export type thumbnailsCreateWithoutVideosInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
  }

  export type thumbnailsUncheckedCreateWithoutVideosInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
  }

  export type thumbnailsCreateOrConnectWithoutVideosInput = {
    where: thumbnailsWhereUniqueInput
    create: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput>
  }

  export type thumbnailsCreateManyVideosInputEnvelope = {
    data: thumbnailsCreateManyVideosInput | thumbnailsCreateManyVideosInput[]
    skipDuplicates?: boolean
  }

  export type channelsCreateWithoutVideosInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    playlists?: playlistsCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutVideosInput = {
    id: string
    title: string
    description: string
    customUrl: string
    publishedAt: Date | string
    viewCount: bigint | number
    subscriberCount: bigint | number
    playlists?: playlistsUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutVideosInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutVideosInput, channelsUncheckedCreateWithoutVideosInput>
  }

  export type playlist_videosUpsertWithWhereUniqueWithoutVideosInput = {
    where: playlist_videosWhereUniqueInput
    update: XOR<playlist_videosUpdateWithoutVideosInput, playlist_videosUncheckedUpdateWithoutVideosInput>
    create: XOR<playlist_videosCreateWithoutVideosInput, playlist_videosUncheckedCreateWithoutVideosInput>
  }

  export type playlist_videosUpdateWithWhereUniqueWithoutVideosInput = {
    where: playlist_videosWhereUniqueInput
    data: XOR<playlist_videosUpdateWithoutVideosInput, playlist_videosUncheckedUpdateWithoutVideosInput>
  }

  export type playlist_videosUpdateManyWithWhereWithoutVideosInput = {
    where: playlist_videosScalarWhereInput
    data: XOR<playlist_videosUpdateManyMutationInput, playlist_videosUncheckedUpdateManyWithoutVideosInput>
  }

  export type tagsUpsertWithWhereUniqueWithoutVideosInput = {
    where: tagsWhereUniqueInput
    update: XOR<tagsUpdateWithoutVideosInput, tagsUncheckedUpdateWithoutVideosInput>
    create: XOR<tagsCreateWithoutVideosInput, tagsUncheckedCreateWithoutVideosInput>
  }

  export type tagsUpdateWithWhereUniqueWithoutVideosInput = {
    where: tagsWhereUniqueInput
    data: XOR<tagsUpdateWithoutVideosInput, tagsUncheckedUpdateWithoutVideosInput>
  }

  export type tagsUpdateManyWithWhereWithoutVideosInput = {
    where: tagsScalarWhereInput
    data: XOR<tagsUpdateManyMutationInput, tagsUncheckedUpdateManyWithoutVideosInput>
  }

  export type tagsScalarWhereInput = {
    AND?: tagsScalarWhereInput | tagsScalarWhereInput[]
    OR?: tagsScalarWhereInput[]
    NOT?: tagsScalarWhereInput | tagsScalarWhereInput[]
    id?: StringFilter<"tags"> | string
    videoId?: StringFilter<"tags"> | string
    text?: StringFilter<"tags"> | string
  }

  export type thumbnailsUpsertWithWhereUniqueWithoutVideosInput = {
    where: thumbnailsWhereUniqueInput
    update: XOR<thumbnailsUpdateWithoutVideosInput, thumbnailsUncheckedUpdateWithoutVideosInput>
    create: XOR<thumbnailsCreateWithoutVideosInput, thumbnailsUncheckedCreateWithoutVideosInput>
  }

  export type thumbnailsUpdateWithWhereUniqueWithoutVideosInput = {
    where: thumbnailsWhereUniqueInput
    data: XOR<thumbnailsUpdateWithoutVideosInput, thumbnailsUncheckedUpdateWithoutVideosInput>
  }

  export type thumbnailsUpdateManyWithWhereWithoutVideosInput = {
    where: thumbnailsScalarWhereInput
    data: XOR<thumbnailsUpdateManyMutationInput, thumbnailsUncheckedUpdateManyWithoutVideosInput>
  }

  export type thumbnailsScalarWhereInput = {
    AND?: thumbnailsScalarWhereInput | thumbnailsScalarWhereInput[]
    OR?: thumbnailsScalarWhereInput[]
    NOT?: thumbnailsScalarWhereInput | thumbnailsScalarWhereInput[]
    id?: StringFilter<"thumbnails"> | string
    urlDefault?: StringFilter<"thumbnails"> | string
    widthDefault?: IntFilter<"thumbnails"> | number
    heightDefault?: IntFilter<"thumbnails"> | number
    videoId?: StringFilter<"thumbnails"> | string
  }

  export type channelsUpsertWithoutVideosInput = {
    update: XOR<channelsUpdateWithoutVideosInput, channelsUncheckedUpdateWithoutVideosInput>
    create: XOR<channelsCreateWithoutVideosInput, channelsUncheckedCreateWithoutVideosInput>
    where?: channelsWhereInput
  }

  export type channelsUpdateToOneWithWhereWithoutVideosInput = {
    where?: channelsWhereInput
    data: XOR<channelsUpdateWithoutVideosInput, channelsUncheckedUpdateWithoutVideosInput>
  }

  export type channelsUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    playlists?: playlistsUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    customUrl?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    viewCount?: BigIntFieldUpdateOperationsInput | bigint | number
    subscriberCount?: BigIntFieldUpdateOperationsInput | bigint | number
    playlists?: playlistsUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type playlistsCreateManyChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    defaultLanguage?: string | null
  }

  export type videosCreateManyChannelsInput = {
    id: string
    publishedAt: Date | string
    title: string
    description: string
    duration?: number | null
    dimension?: string | null
    caption?: boolean | null
    licensedContent?: boolean | null
    projection?: string | null
    viewCount?: number | null
    likeCount?: number | null
    favoriteCount?: number | null
    commentCount?: number | null
    shortId?: string | null
  }

  export type playlistsUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutPlaylistsNestedInput
  }

  export type playlistsUncheckedUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutPlaylistsNestedInput
  }

  export type playlistsUncheckedUpdateManyWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    defaultLanguage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type videosUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUpdateManyWithoutVideosNestedInput
    tags?: tagsUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUpdateManyWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
    playlist_videos?: playlist_videosUncheckedUpdateManyWithoutVideosNestedInput
    tags?: tagsUncheckedUpdateManyWithoutVideosNestedInput
    thumbnails?: thumbnailsUncheckedUpdateManyWithoutVideosNestedInput
  }

  export type videosUncheckedUpdateManyWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    publishedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    dimension?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableBoolFieldUpdateOperationsInput | boolean | null
    licensedContent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    projection?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: NullableIntFieldUpdateOperationsInput | number | null
    likeCount?: NullableIntFieldUpdateOperationsInput | number | null
    favoriteCount?: NullableIntFieldUpdateOperationsInput | number | null
    commentCount?: NullableIntFieldUpdateOperationsInput | number | null
    shortId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type playlist_videosCreateManyPlaylistsInput = {
    videoId: string
  }

  export type playlist_videosUpdateWithoutPlaylistsInput = {
    videos?: videosUpdateOneRequiredWithoutPlaylist_videosNestedInput
  }

  export type playlist_videosUncheckedUpdateWithoutPlaylistsInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type playlist_videosUncheckedUpdateManyWithoutPlaylistsInput = {
    videoId?: StringFieldUpdateOperationsInput | string
  }

  export type playlist_videosCreateManyVideosInput = {
    playlistId: string
  }

  export type tagsCreateManyVideosInput = {
    id: string
    text: string
  }

  export type thumbnailsCreateManyVideosInput = {
    id: string
    urlDefault: string
    widthDefault: number
    heightDefault: number
  }

  export type playlist_videosUpdateWithoutVideosInput = {
    playlists?: playlistsUpdateOneRequiredWithoutPlaylist_videosNestedInput
  }

  export type playlist_videosUncheckedUpdateWithoutVideosInput = {
    playlistId?: StringFieldUpdateOperationsInput | string
  }

  export type playlist_videosUncheckedUpdateManyWithoutVideosInput = {
    playlistId?: StringFieldUpdateOperationsInput | string
  }

  export type tagsUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type tagsUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type tagsUncheckedUpdateManyWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type thumbnailsUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
  }

  export type thumbnailsUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
  }

  export type thumbnailsUncheckedUpdateManyWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    urlDefault?: StringFieldUpdateOperationsInput | string
    widthDefault?: IntFieldUpdateOperationsInput | number
    heightDefault?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ChannelsCountOutputTypeDefaultArgs instead
     */
    export type ChannelsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChannelsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistsCountOutputTypeDefaultArgs instead
     */
    export type PlaylistsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VideosCountOutputTypeDefaultArgs instead
     */
    export type VideosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use brandingsDefaultArgs instead
     */
    export type brandingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = brandingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use channelsDefaultArgs instead
     */
    export type channelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = channelsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commentsDefaultArgs instead
     */
    export type commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = commentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use playlist_videosDefaultArgs instead
     */
    export type playlist_videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = playlist_videosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use playlistsDefaultArgs instead
     */
    export type playlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = playlistsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tagsDefaultArgs instead
     */
    export type tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tagsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use thumbnailsDefaultArgs instead
     */
    export type thumbnailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = thumbnailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use videosDefaultArgs instead
     */
    export type videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = videosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}